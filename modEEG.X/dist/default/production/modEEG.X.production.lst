

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 07 17:31:38 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4458
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           	psect	idataCOMRAM
    24  000BB4                     __pidataCOMRAM:
    25                           	opt stack 0
    26                           
    27                           ;initializer for _sampleDelay
    28  000BB4  0064               	dw	100
    29                           
    30                           	psect	smallconst
    31  000800                     __psmallconst:
    32                           	opt stack 0
    33  000800  00                 	db	0
    34  000801                     setup@F4306:
    35                           	opt stack 0
    36  000801  52                 	db	82
    37  000802  65                 	db	101
    38  000803  61                 	db	97
    39  000804  64                 	db	100
    40  000805  79                 	db	121
    41  000806  21                 	db	33
    42  000807  0A                 	db	10
    43  000808  00                 	db	0
    44  000809                     __end_ofsetup@F4306:
    45                           	opt stack 0
    46  0000                     _ADCON0bits	set	4034
    47  0000                     _ADCON1	set	4033
    48  0000                     _BAUDCONbits	set	4024
    49  0000                     _PIR1bits	set	3998
    50  0000                     _PORTB	set	3969
    51  0000                     _PORTCbits	set	3970
    52  0000                     _PORTD	set	3971
    53  0000                     _RCREG	set	4014
    54  0000                     _RCSTAbits	set	4011
    55  0000                     _SPBRG	set	4015
    56  0000                     _SPBRGH	set	4016
    57  0000                     _T0CONbits	set	4053
    58  0000                     _TMR0H	set	4055
    59  0000                     _TMR0L	set	4054
    60  0000                     _TRISCbits	set	3988
    61  0000                     _TXREG	set	4013
    62  0000                     _TXSTAbits	set	4012
    63                           
    64                           ; #config settings
    65  000809  00                 	db	0	; dummy byte at the end
    66  0000                     
    67                           	psect	cinit
    68  000B6A                     __pcinit:
    69                           	opt stack 0
    70  000B6A                     start_initialization:
    71                           	opt stack 0
    72  000B6A                     __initialization:
    73                           	opt stack 0
    74                           
    75                           ; Initialize objects allocated to COMRAM (2 bytes)
    76                           ; load TBLPTR registers with __pidataCOMRAM
    77  000B6A  0EB4               	movlw	low __pidataCOMRAM
    78  000B6C  6EF6               	movwf	tblptrl,c
    79  000B6E  0E0B               	movlw	high __pidataCOMRAM
    80  000B70  6EF7               	movwf	tblptrh,c
    81  000B72  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    82  000B74  6EF8               	movwf	tblptru,c
    83  000B76  0009               	tblrd		*+	;fetch initializer
    84  000B78  CFF5 F03C          	movff	tablat,__pdataCOMRAM
    85  000B7C  0009               	tblrd		*+	;fetch initializer
    86  000B7E  CFF5 F03D          	movff	tablat,__pdataCOMRAM+1
    87                           
    88                           ; Clear objects allocated to COMRAM (35 bytes)
    89  000B82  EE00  F001         	lfsr	0,__pbssCOMRAM
    90  000B86  0E23               	movlw	35
    91  000B88                     clear_0:
    92  000B88  6AEE               	clrf	postinc0,c
    93  000B8A  06E8               	decf	wreg,f,c
    94  000B8C  E1FD               	bnz	clear_0
    95  000B8E                     end_of_initialization:
    96                           	opt stack 0
    97  000B8E                     __end_of__initialization:
    98                           	opt stack 0
    99  000B8E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   100  000B90  6EF8               	movwf	tblptru,c
   101  000B92  0100               	movlb	0
   102  000B94  EFE0  F004         	goto	_main	;jump to C main() function
   103                           tblptru	equ	0xFF8
   104                           tblptrh	equ	0xFF7
   105                           tblptrl	equ	0xFF6
   106                           tablat	equ	0xFF5
   107                           postinc0	equ	0xFEE
   108                           wreg	equ	0xFE8
   109                           
   110                           	psect	bssCOMRAM
   111  000001                     __pbssCOMRAM:
   112                           	opt stack 0
   113  000001                     _sampleBuffer:
   114                           	opt stack 0
   115  000001                     	ds	32
   116  000021                     _lastSampleTimestamp:
   117                           	opt stack 0
   118  000021                     	ds	2
   119  000023                     _mode:
   120                           	opt stack 0
   121  000023                     	ds	1
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           tblptrl	equ	0xFF6
   125                           tablat	equ	0xFF5
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	dataCOMRAM
   130  00003C                     __pdataCOMRAM:
   131                           	opt stack 0
   132  00003C                     _sampleDelay:
   133                           	opt stack 0
   134  00003C                     	ds	2
   135                           tblptru	equ	0xFF8
   136                           tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           
   142                           	psect	cstackCOMRAM
   143  000024                     __pcstackCOMRAM:
   144                           	opt stack 0
   145  000024                     ?___lwdiv:
   146                           	opt stack 0
   147  000024                     ?___lwmod:
   148                           	opt stack 0
   149  000024                     takeReading@i:
   150                           	opt stack 0
   151  000024                     sendSerialByte@time:
   152                           	opt stack 0
   153  000024                     ___lwdiv@dividend:
   154                           	opt stack 0
   155  000024                     ___lwmod@dividend:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x0
   159  000024                     	ds	2
   160  000026                     sendSerialByte@byte:
   161                           	opt stack 0
   162  000026                     ___lwdiv@divisor:
   163                           	opt stack 0
   164  000026                     ___lwmod@divisor:
   165                           	opt stack 0
   166                           
   167                           ; 2 bytes @ 0x2
   168  000026                     	ds	1
   169  000027                     sendData@checksum:
   170                           	opt stack 0
   171  000027                     sendSerialStr@str:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x3
   175  000027                     	ds	1
   176  000028                     sendData@i:
   177                           	opt stack 0
   178  000028                     ___lwmod@counter:
   179                           	opt stack 0
   180  000028                     ___lwdiv@quotient:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0x4
   184  000028                     	ds	1
   185  000029                     sendSerialStr@num:
   186                           	opt stack 0
   187                           
   188                           ; 1 bytes @ 0x5
   189  000029                     	ds	1
   190  00002A                     ??_sendSerialStr:
   191  00002A                     ___lwdiv@counter:
   192                           	opt stack 0
   193                           
   194                           ; 1 bytes @ 0x6
   195  00002A                     	ds	1
   196  00002B                     delayms@ms:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x7
   200  00002B                     	ds	1
   201  00002C                     sendSerialStr@i:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x8
   205  00002C                     	ds	1
   206  00002D                     ??_delayms:
   207                           
   208                           ; 1 bytes @ 0x9
   209  00002D                     	ds	1
   210  00002E                     setup@readyStr:
   211                           	opt stack 0
   212                           
   213                           ; 8 bytes @ 0xA
   214  00002E                     	ds	1
   215  00002F                     delayms@chunks:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0xB
   219  00002F                     	ds	2
   220  000031                     delayms@remainder:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0xD
   224  000031                     	ds	1
   225  000032                     delayms@i:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0xE
   229  000032                     	ds	4
   230  000036                     setup@i:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x12
   234  000036                     	ds	1
   235  000037                     ??_main:
   236                           
   237                           ; 1 bytes @ 0x13
   238  000037                     	ds	1
   239  000038                     main@commandByte:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x14
   243  000038                     	ds	1
   244  000039                     main@errorFlag:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x15
   248  000039                     	ds	1
   249  00003A                     main@newDelay:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x16
   253  00003A                     	ds	2
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 25 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  newDelay        2   22[COMRAM] struct inttime
   271 ;;  errorFlag       1   21[COMRAM] unsigned char 
   272 ;;  commandByte     1   20[COMRAM] unsigned char 
   273 ;; Return value:  Size  Location     Type
   274 ;;                  1    wreg      void 
   275 ;; Registers used:
   276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   277 ;; Tracked objects:
   278 ;;		On entry : 0/0
   279 ;;		On exit  : 0/0
   280 ;;		Unchanged: 0/0
   281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   282 ;;      Params:         0       0       0       0       0       0       0       0       0
   283 ;;      Locals:         4       0       0       0       0       0       0       0       0
   284 ;;      Temps:          1       0       0       0       0       0       0       0       0
   285 ;;      Totals:         5       0       0       0       0       0       0       0       0
   286 ;;Total ram usage:        5 bytes
   287 ;; Hardware stack levels required when called:    3
   288 ;; This function calls:
   289 ;;		_delayms
   290 ;;		_sendData
   291 ;;		_setup
   292 ;;		_takeReading
   293 ;; This function is called by:
   294 ;;		Startup code after reset
   295 ;; This function uses a non-reentrant model
   296 ;;
   297                           
   298                           	psect	text0
   299  0009C0                     __ptext0:
   300                           	opt stack 0
   301  0009C0                     _main:
   302                           	opt stack 28
   303                           
   304                           ;main.c: 26: setup();
   305                           
   306                           ;incstack = 0
   307  0009C0  EC52  F004         	call	_setup	;wreg free
   308  0009C4                     l57:
   309  0009C4  0004               	clrwdt		;# 
   310                           
   311                           ;main.c: 29: if(PIR1bits.RCIF){
   312  0009C6  AA9E               	btfss	3998,5,c	;volatile
   313  0009C8  D02D               	goto	l58
   314                           
   315                           ;main.c: 30: unsigned char commandByte = RCREG;
   316  0009CA  CFAE F038          	movff	4014,main@commandByte	;volatile
   317                           
   318                           ;main.c: 31: union inttime newDelay;
   319                           ;main.c: 32: char errorFlag=0;
   320  0009CE  0E00               	movlw	0
   321  0009D0  6E39               	movwf	main@errorFlag,c
   322                           
   323                           ;main.c: 33: switch(commandByte){
   324  0009D2  D024               	goto	l1074
   325  0009D4                     l1054:
   326                           
   327                           ;main.c: 44: _delay((unsigned long)((1)*(24000000/4000.0)));
   328  0009D4  0E08               	movlw	8
   329  0009D6  6E37               	movwf	??_main& (0+255),c
   330  0009D8  0ECA               	movlw	202
   331  0009DA                     u397:
   332  0009DA  2EE8               	decfsz	wreg,f,c
   333  0009DC  D7FE               	goto	u397
   334  0009DE  2E37               	decfsz	??_main& (0+255),f,c
   335  0009E0  D7FC               	goto	u397
   336                           
   337                           ;main.c: 45: if(PIR1bits.RCIF){
   338  0009E2  AA9E               	btfss	3998,5,c	;volatile
   339  0009E4  D003               	goto	l1060
   340                           
   341                           ;main.c: 46: newDelay.upper=RCREG;
   342  0009E6  CFAE F03B          	movff	4014,main@newDelay+1	;volatile
   343                           
   344                           ;main.c: 47: }
   345  0009EA  D002               	goto	l1062
   346  0009EC                     l1060:
   347                           
   348                           ;main.c: 48: else{
   349                           ;main.c: 49: errorFlag = 1;
   350  0009EC  0E01               	movlw	1
   351  0009EE  6E39               	movwf	main@errorFlag,c
   352  0009F0                     l1062:
   353                           
   354                           ;main.c: 50: }
   355                           ;main.c: 51: _delay((unsigned long)((1)*(24000000/4000.0)));
   356  0009F0  0E08               	movlw	8
   357  0009F2  6E37               	movwf	??_main& (0+255),c
   358  0009F4  0ECA               	movlw	202
   359  0009F6                     u407:
   360  0009F6  2EE8               	decfsz	wreg,f,c
   361  0009F8  D7FE               	goto	u407
   362  0009FA  2E37               	decfsz	??_main& (0+255),f,c
   363  0009FC  D7FC               	goto	u407
   364                           
   365                           ;main.c: 52: if(PIR1bits.RCIF){
   366  0009FE  AA9E               	btfss	3998,5,c	;volatile
   367  000A00  D003               	goto	l1068
   368                           
   369                           ;main.c: 53: newDelay.lower=RCREG;
   370  000A02  CFAE F03A          	movff	4014,main@newDelay	;volatile
   371                           
   372                           ;main.c: 54: }
   373  000A06  D002               	goto	l64
   374  000A08                     l1068:
   375                           
   376                           ;main.c: 55: else{
   377                           ;main.c: 56: errorFlag = 1;
   378  000A08  0E01               	movlw	1
   379  000A0A  6E39               	movwf	main@errorFlag,c
   380  000A0C                     l64:
   381                           
   382                           ;main.c: 57: }
   383                           ;main.c: 58: if(!errorFlag){
   384  000A0C  5039               	movf	main@errorFlag,w,c
   385  000A0E  A4D8               	btfss	status,2,c
   386  000A10  D009               	goto	l58
   387                           
   388                           ;main.c: 59: sampleDelay = newDelay.all;
   389  000A12  C03A  F03C         	movff	main@newDelay,_sampleDelay
   390  000A16  C03B  F03D         	movff	main@newDelay+1,_sampleDelay+1
   391                           
   392                           ;main.c: 68: }
   393                           
   394                           ;main.c: 67: break;
   395                           
   396                           ;main.c: 65: default:
   397                           
   398                           ;main.c: 63: }
   399                           ;main.c: 64: break;
   400                           
   401                           ;main.c: 61: else{
   402                           
   403                           ;main.c: 60: }
   404  000A1A  D004               	goto	l58
   405  000A1C                     l1074:
   406  000A1C  5038               	movf	main@commandByte,w,c
   407                           
   408                           ; Switch size 1, requested type "space"
   409                           ; Number of cases is 1, Range of values is 163 to 163
   410                           ; switch strategies available:
   411                           ; Name         Instructions Cycles
   412                           ; simple_byte            4     3 (average)
   413                           ;	Chosen strategy is simple_byte
   414  000A1E  0AA3               	xorlw	163	; case 163
   415  000A20  B4D8               	btfsc	status,2,c
   416  000A22  D7D8               	goto	l1054
   417  000A24                     l58:
   418                           
   419                           ;main.c: 69: }
   420                           ;main.c: 82: if(PORTCbits.RC2){
   421  000A24  A482               	btfss	3970,2,c	;volatile
   422  000A26  D7CE               	goto	l57
   423                           
   424                           ;main.c: 83: delayms(sampleDelay);
   425  000A28  C03C  F02B         	movff	_sampleDelay,delayms@ms
   426  000A2C  C03D  F02C         	movff	_sampleDelay+1,delayms@ms+1
   427  000A30  EC99  F004         	call	_delayms	;wreg free
   428                           
   429                           ;main.c: 84: takeReading();
   430  000A34  EC1F  F005         	call	_takeReading	;wreg free
   431                           
   432                           ;main.c: 85: sendData();
   433  000A38  EC05  F004         	call	_sendData	;wreg free
   434  000A3C  D7C3               	goto	l57
   435  000A3E                     __end_of_main:
   436                           	opt stack 0
   437                           tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           status	equ	0xFD8
   444                           
   445 ;; *************** function _takeReading *****************
   446 ;; Defined at:
   447 ;;		line 125 in file "main.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;		None
   450 ;; Auto vars:     Size  Location     Type
   451 ;;  i               1    0[COMRAM] unsigned char 
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   461 ;;      Params:         0       0       0       0       0       0       0       0       0
   462 ;;      Locals:         1       0       0       0       0       0       0       0       0
   463 ;;      Temps:          0       0       0       0       0       0       0       0       0
   464 ;;      Totals:         1       0       0       0       0       0       0       0       0
   465 ;;Total ram usage:        1 bytes
   466 ;; Hardware stack levels used:    1
   467 ;; This function calls:
   468 ;;		Nothing
   469 ;; This function is called by:
   470 ;;		_main
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text1
   475  000A3E                     __ptext1:
   476                           	opt stack 0
   477  000A3E                     _takeReading:
   478                           	opt stack 30
   479                           
   480                           ;main.c: 126: PORTCbits.RC1 = 1;
   481                           
   482                           ;incstack = 0
   483  000A3E  8282               	bsf	3970,1,c	;volatile
   484                           
   485                           ;main.c: 127: lastSampleTimestamp.lower = TMR0L;
   486  000A40  CFD6 F021          	movff	4054,_lastSampleTimestamp	;volatile
   487                           
   488                           ;main.c: 128: lastSampleTimestamp.upper = TMR0H;
   489  000A44  CFD7 F022          	movff	4055,_lastSampleTimestamp+1	;volatile
   490                           
   491                           ;main.c: 129: PORTCbits.RC0 = 1;
   492  000A48  8082               	bsf	3970,0,c	;volatile
   493  000A4A  F000               	nop		;# 
   494  000A4C  F000               	nop		;# 
   495  000A4E  F000               	nop		;# 
   496  000A50  F000               	nop		;# 
   497                           
   498                           ;main.c: 135: PORTCbits.RC1 = 0;
   499  000A52  9282               	bcf	3970,1,c	;volatile
   500  000A54  F000               	nop		;# 
   501                           
   502                           ;main.c: 145: sampleBuffer[15].rd = PORTD;
   503  000A56  CF83 F01F          	movff	3971,_sampleBuffer+30	;volatile
   504                           
   505                           ;main.c: 146: sampleBuffer[15].rb = PORTB;
   506  000A5A  CF81 F020          	movff	3969,_sampleBuffer+31	;volatile
   507                           
   508                           ;main.c: 150: unsigned char i = 15;
   509  000A5E  0E0F               	movlw	15
   510  000A60  6E24               	movwf	takeReading@i,c
   511  000A62                     l852:
   512                           
   513                           ;main.c: 152: i--;
   514  000A62  0624               	decf	takeReading@i,f,c
   515                           
   516                           ;main.c: 153: PORTCbits.RC0 = 0;
   517  000A64  9082               	bcf	3970,0,c	;volatile
   518  000A66  F000               	nop		;# 
   519                           
   520                           ;main.c: 160: sampleBuffer[i].rd = PORTD;
   521  000A68  5024               	movf	takeReading@i,w,c
   522  000A6A  0D02               	mullw	2
   523  000A6C  0E01               	movlw	low _sampleBuffer
   524  000A6E  24F3               	addwf	prodl,w,c
   525  000A70  6ED9               	movwf	fsr2l,c
   526  000A72  0E00               	movlw	high _sampleBuffer
   527  000A74  20F4               	addwfc	prodh,w,c
   528  000A76  6EDA               	movwf	fsr2h,c
   529  000A78  CF83 FFDF          	movff	3971,indf2	;volatile
   530                           
   531                           ;main.c: 161: sampleBuffer[i].rb = PORTB;
   532  000A7C  5024               	movf	takeReading@i,w,c
   533  000A7E  0D02               	mullw	2
   534  000A80  0E01               	movlw	1
   535  000A82  26F3               	addwf	prodl,f,c
   536  000A84  0E00               	movlw	0
   537  000A86  22F4               	addwfc	prodh,f,c
   538  000A88  0E01               	movlw	low _sampleBuffer
   539  000A8A  24F3               	addwf	prodl,w,c
   540  000A8C  6ED9               	movwf	fsr2l,c
   541  000A8E  0E00               	movlw	high _sampleBuffer
   542  000A90  20F4               	addwfc	prodh,w,c
   543  000A92  6EDA               	movwf	fsr2h,c
   544  000A94  CF81 FFDF          	movff	3969,indf2	;volatile
   545                           
   546                           ;main.c: 163: PORTCbits.RC0 = 1;
   547  000A98  8082               	bsf	3970,0,c	;volatile
   548                           
   549                           ;main.c: 165: } while (i);
   550  000A9A  5024               	movf	takeReading@i,w,c
   551  000A9C  B4D8               	btfsc	status,2,c
   552  000A9E  0012               	return	
   553  000AA0  D7E0               	goto	l852
   554  000AA2                     __end_of_takeReading:
   555                           	opt stack 0
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           prodh	equ	0xFF4
   561                           prodl	equ	0xFF3
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           indf2	equ	0xFDF
   565                           fsr2h	equ	0xFDA
   566                           fsr2l	equ	0xFD9
   567                           status	equ	0xFD8
   568                           
   569 ;; *************** function _setup *****************
   570 ;; Defined at:
   571 ;;		line 91 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  i               1   18[COMRAM] unsigned char 
   576 ;;  readyStr        8   10[COMRAM] const unsigned char [8]
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   586 ;;      Params:         0       0       0       0       0       0       0       0       0
   587 ;;      Locals:         9       0       0       0       0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0       0       0       0       0
   589 ;;      Totals:         9       0       0       0       0       0       0       0       0
   590 ;;Total ram usage:        9 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; Hardware stack levels required when called:    2
   593 ;; This function calls:
   594 ;;		_sendSerialStr
   595 ;; This function is called by:
   596 ;;		_main
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text2
   601  0008A4                     __ptext2:
   602                           	opt stack 0
   603  0008A4                     _setup:
   604                           	opt stack 28
   605                           
   606                           ;main.c: 92: ADCON0bits.ADON = 0;
   607                           
   608                           ;incstack = 0
   609  0008A4  90C2               	bcf	4034,0,c	;volatile
   610                           
   611                           ;main.c: 93: ADCON1 = 0b00001111;
   612  0008A6  0E0F               	movlw	15
   613  0008A8  6EC1               	movwf	4033,c	;volatile
   614                           
   615                           ;main.c: 94: T0CONbits.TMR0ON = 1;
   616  0008AA  8ED5               	bsf	4053,7,c	;volatile
   617                           
   618                           ;main.c: 95: T0CONbits.T08BIT = 0;
   619  0008AC  9CD5               	bcf	4053,6,c	;volatile
   620                           
   621                           ;main.c: 96: T0CONbits.T0CS = 0;
   622  0008AE  9AD5               	bcf	4053,5,c	;volatile
   623                           
   624                           ;main.c: 97: T0CONbits.PSA = 0;
   625  0008B0  96D5               	bcf	4053,3,c	;volatile
   626                           
   627                           ;main.c: 98: T0CONbits.T0PS = 0b101;
   628  0008B2  50D5               	movf	4053,w,c	;volatile
   629  0008B4  0BF8               	andlw	-8
   630  0008B6  0905               	iorlw	5
   631  0008B8  6ED5               	movwf	4053,c	;volatile
   632                           
   633                           ;main.c: 100: TRISCbits.TRISC0 = 0;
   634  0008BA  9094               	bcf	3988,0,c	;volatile
   635                           
   636                           ;main.c: 101: PORTCbits.RC0 = 1;
   637  0008BC  8082               	bsf	3970,0,c	;volatile
   638                           
   639                           ;main.c: 102: TRISCbits.TRISC1 = 0;
   640  0008BE  9294               	bcf	3988,1,c	;volatile
   641                           
   642                           ;main.c: 103: PORTCbits.RC1 = 0;
   643  0008C0  9282               	bcf	3970,1,c	;volatile
   644                           
   645                           ;main.c: 104: TRISCbits.RC2 = 1;
   646  0008C2  8494               	bsf	3988,2,c	;volatile
   647                           
   648                           ;main.c: 106: TRISCbits.TRISC6 = 1;
   649  0008C4  8C94               	bsf	3988,6,c	;volatile
   650                           
   651                           ;main.c: 107: TRISCbits.TRISC7 = 1;
   652  0008C6  8E94               	bsf	3988,7,c	;volatile
   653                           
   654                           ;main.c: 108: TXSTAbits.TX9 = 0;
   655  0008C8  9CAC               	bcf	4012,6,c	;volatile
   656                           
   657                           ;main.c: 109: TXSTAbits.TXEN = 1;
   658  0008CA  8AAC               	bsf	4012,5,c	;volatile
   659                           
   660                           ;main.c: 110: TXSTAbits.SYNC = 0;
   661  0008CC  98AC               	bcf	4012,4,c	;volatile
   662                           
   663                           ;main.c: 111: RCSTAbits.SPEN = 1;
   664  0008CE  8EAB               	bsf	4011,7,c	;volatile
   665                           
   666                           ;main.c: 112: RCSTAbits.RX9 = 0;
   667  0008D0  9CAB               	bcf	4011,6,c	;volatile
   668                           
   669                           ;main.c: 113: RCSTAbits.CREN = 1;
   670  0008D2  88AB               	bsf	4011,4,c	;volatile
   671                           
   672                           ;main.c: 114: BAUDCONbits.BRG16 = 1;
   673  0008D4  86B8               	bsf	4024,3,c	;volatile
   674                           
   675                           ;main.c: 115: TXSTAbits.BRGH = 0;
   676  0008D6  94AC               	bcf	4012,2,c	;volatile
   677                           
   678                           ;main.c: 116: SPBRGH = 0;
   679  0008D8  0E00               	movlw	0
   680  0008DA  6EB0               	movwf	4016,c	;volatile
   681                           
   682                           ;main.c: 117: SPBRG = 12;
   683  0008DC  0E0C               	movlw	12
   684  0008DE  6EAF               	movwf	4015,c	;volatile
   685                           
   686                           ;main.c: 118: for (unsigned char i = 0; i < 16; i++) {
   687  0008E0  0E00               	movlw	0
   688  0008E2  6E36               	movwf	setup@i,c
   689  0008E4                     l1018:
   690  0008E4  0E0F               	movlw	15
   691  0008E6  6436               	cpfsgt	setup@i,c
   692  0008E8  D001               	goto	l1022
   693  0008EA  D00E               	goto	l1028
   694  0008EC                     l1022:
   695                           
   696                           ;main.c: 119: sampleBuffer[i].all = (unsigned int) 0;
   697  0008EC  5036               	movf	setup@i,w,c
   698  0008EE  0D02               	mullw	2
   699  0008F0  0E01               	movlw	low _sampleBuffer
   700  0008F2  24F3               	addwf	prodl,w,c
   701  0008F4  6ED9               	movwf	fsr2l,c
   702  0008F6  0E00               	movlw	high _sampleBuffer
   703  0008F8  20F4               	addwfc	prodh,w,c
   704  0008FA  6EDA               	movwf	fsr2h,c
   705  0008FC  0E00               	movlw	0
   706  0008FE  6EDE               	movwf	postinc2,c
   707  000900  0E00               	movlw	0
   708  000902  6EDD               	movwf	postdec2,c
   709  000904  2A36               	incf	setup@i,f,c
   710  000906  D7EE               	goto	l1018
   711  000908                     l1028:
   712                           
   713                           ;main.c: 120: }
   714                           ;main.c: 121: const char readyStr[] = {"Ready!\n"};
   715  000908  0E01               	movlw	low setup@F4306
   716  00090A  6EF6               	movwf	tblptrl,c
   717  00090C                     	if	1	;There is more than 1 active tblptr byte
   718  00090C  0E08               	movlw	high setup@F4306
   719  00090E  6EF7               	movwf	tblptrh,c
   720  000910                     	endif
   721  000910                     	if	0	;There are less than 3 active tblptr bytes
   722  000910                     	endif
   723  000910  EE20  F02E         	lfsr	2,setup@readyStr
   724  000914  0E07               	movlw	7
   725  000916                     u310:
   726  000916  0009               	tblrd		*+
   727  000918  CFF5 FFDE          	movff	tablat,postinc2
   728  00091C  06E8               	decf	wreg,f,c
   729  00091E  E2FB               	bc	u310
   730                           
   731                           ;main.c: 122: sendSerialStr(readyStr, 7);
   732  000920  0E2E               	movlw	low setup@readyStr
   733  000922  6E27               	movwf	sendSerialStr@str,c
   734  000924  0E00               	movlw	high setup@readyStr
   735  000926  6E28               	movwf	sendSerialStr@str+1,c
   736  000928  0E07               	movlw	7
   737  00092A  6E29               	movwf	sendSerialStr@num,c
   738  00092C  EC9B  F005         	call	_sendSerialStr	;wreg free
   739  000930  0012               	return		;funcret
   740  000932                     __end_of_setup:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           tblptrl	equ	0xFF6
   745                           tablat	equ	0xFF5
   746                           prodh	equ	0xFF4
   747                           prodl	equ	0xFF3
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           indf2	equ	0xFDF
   751                           postinc2	equ	0xFDE
   752                           postdec2	equ	0xFDD
   753                           fsr2h	equ	0xFDA
   754                           fsr2l	equ	0xFD9
   755                           status	equ	0xFD8
   756                           
   757 ;; *************** function _sendSerialStr *****************
   758 ;; Defined at:
   759 ;;		line 207 in file "main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  str             2    3[COMRAM] PTR const unsigned char 
   762 ;;		 -> setup@readyStr(8), 
   763 ;;  num             1    5[COMRAM] unsigned char 
   764 ;; Auto vars:     Size  Location     Type
   765 ;;  i               2    8[COMRAM] unsigned int 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   775 ;;      Params:         3       0       0       0       0       0       0       0       0
   776 ;;      Locals:         2       0       0       0       0       0       0       0       0
   777 ;;      Temps:          2       0       0       0       0       0       0       0       0
   778 ;;      Totals:         7       0       0       0       0       0       0       0       0
   779 ;;Total ram usage:        7 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    1
   782 ;; This function calls:
   783 ;;		_sendSerialByte
   784 ;; This function is called by:
   785 ;;		_setup
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           	psect	text3
   790  000B36                     __ptext3:
   791                           	opt stack 0
   792  000B36                     _sendSerialStr:
   793                           	opt stack 28
   794                           
   795                           ;main.c: 208: for(unsigned int i=0; i<num; i++){
   796                           
   797                           ;incstack = 0
   798  000B36  0E00               	movlw	0
   799  000B38  6E2D               	movwf	sendSerialStr@i+1,c
   800  000B3A  0E00               	movlw	0
   801  000B3C  6E2C               	movwf	sendSerialStr@i,c
   802  000B3E  D00B               	goto	l936
   803  000B40                     l932:
   804                           
   805                           ;main.c: 209: sendSerialByte(str[i]);
   806  000B40  502C               	movf	sendSerialStr@i,w,c
   807  000B42  2427               	addwf	sendSerialStr@str,w,c
   808  000B44  6ED9               	movwf	fsr2l,c
   809  000B46  502D               	movf	sendSerialStr@i+1,w,c
   810  000B48  2028               	addwfc	sendSerialStr@str+1,w,c
   811  000B4A  6EDA               	movwf	fsr2h,c
   812  000B4C  50DF               	movf	indf2,w,c
   813  000B4E  ECCC  F005         	call	_sendSerialByte
   814  000B52  4A2C               	infsnz	sendSerialStr@i,f,c
   815  000B54  2A2D               	incf	sendSerialStr@i+1,f,c
   816  000B56                     l936:
   817  000B56  5029               	movf	sendSerialStr@num,w,c
   818  000B58  6E2A               	movwf	??_sendSerialStr& (0+255),c
   819  000B5A  6A2B               	clrf	(??_sendSerialStr+1)& (0+255),c
   820  000B5C  502A               	movf	??_sendSerialStr,w,c
   821  000B5E  5C2C               	subwf	sendSerialStr@i,w,c
   822  000B60  502B               	movf	??_sendSerialStr+1,w,c
   823  000B62  582D               	subwfb	sendSerialStr@i+1,w,c
   824  000B64  B0D8               	btfsc	status,0,c
   825  000B66  0012               	return	
   826  000B68  D7EB               	goto	l932
   827  000B6A                     __end_of_sendSerialStr:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           prodh	equ	0xFF4
   834                           prodl	equ	0xFF3
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           indf2	equ	0xFDF
   838                           postinc2	equ	0xFDE
   839                           postdec2	equ	0xFDD
   840                           fsr2h	equ	0xFDA
   841                           fsr2l	equ	0xFD9
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _sendData *****************
   845 ;; Defined at:
   846 ;;		line 178 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  i               1    4[COMRAM] unsigned char 
   851 ;;  checksum        1    3[COMRAM] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   861 ;;      Params:         0       0       0       0       0       0       0       0       0
   862 ;;      Locals:         2       0       0       0       0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0       0       0       0       0
   864 ;;      Totals:         2       0       0       0       0       0       0       0       0
   865 ;;Total ram usage:        2 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    1
   868 ;; This function calls:
   869 ;;		_sendSerialByte
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text4
   876  00080A                     __ptext4:
   877                           	opt stack 0
   878  00080A                     _sendData:
   879                           	opt stack 29
   880                           
   881                           ;main.c: 179: unsigned char checksum=0;
   882                           
   883                           ;incstack = 0
   884  00080A  0E00               	movlw	0
   885  00080C  6E27               	movwf	sendData@checksum,c
   886                           
   887                           ;main.c: 180: sendSerialByte(0);
   888  00080E  0E00               	movlw	0
   889  000810  ECCC  F005         	call	_sendSerialByte
   890                           
   891                           ;main.c: 181: sendSerialByte(lastSampleTimestamp.upper);
   892  000814  5022               	movf	_lastSampleTimestamp+1,w,c
   893  000816  ECCC  F005         	call	_sendSerialByte
   894                           
   895                           ;main.c: 182: checksum ^= lastSampleTimestamp.upper;
   896  00081A  5022               	movf	_lastSampleTimestamp+1,w,c
   897  00081C  1A27               	xorwf	sendData@checksum,f,c
   898                           
   899                           ;main.c: 183: sendSerialByte(lastSampleTimestamp.lower);
   900  00081E  5021               	movf	_lastSampleTimestamp,w,c
   901  000820  ECCC  F005         	call	_sendSerialByte
   902                           
   903                           ;main.c: 184: checksum ^= lastSampleTimestamp.lower;
   904  000824  5021               	movf	_lastSampleTimestamp,w,c
   905  000826  1A27               	xorwf	sendData@checksum,f,c
   906                           
   907                           ;main.c: 185: for(unsigned char i=0;i<16;i++){
   908  000828  0E00               	movlw	0
   909  00082A  6E28               	movwf	sendData@i,c
   910  00082C                     l878:
   911  00082C  0E0F               	movlw	15
   912  00082E  6428               	cpfsgt	sendData@i,c
   913  000830  D001               	goto	l882
   914  000832  D034               	goto	l892
   915  000834                     l882:
   916                           
   917                           ;main.c: 186: sendSerialByte(sampleBuffer[i].rd);
   918  000834  5028               	movf	sendData@i,w,c
   919  000836  0D02               	mullw	2
   920  000838  0E01               	movlw	low _sampleBuffer
   921  00083A  24F3               	addwf	prodl,w,c
   922  00083C  6ED9               	movwf	fsr2l,c
   923  00083E  0E00               	movlw	high _sampleBuffer
   924  000840  20F4               	addwfc	prodh,w,c
   925  000842  6EDA               	movwf	fsr2h,c
   926  000844  50DF               	movf	indf2,w,c
   927  000846  ECCC  F005         	call	_sendSerialByte
   928                           
   929                           ;main.c: 187: checksum ^= sampleBuffer[i].rd;
   930  00084A  5028               	movf	sendData@i,w,c
   931  00084C  0D02               	mullw	2
   932  00084E  0E01               	movlw	low _sampleBuffer
   933  000850  24F3               	addwf	prodl,w,c
   934  000852  6ED9               	movwf	fsr2l,c
   935  000854  0E00               	movlw	high _sampleBuffer
   936  000856  20F4               	addwfc	prodh,w,c
   937  000858  6EDA               	movwf	fsr2h,c
   938  00085A  50DF               	movf	indf2,w,c
   939  00085C  1A27               	xorwf	sendData@checksum,f,c
   940                           
   941                           ;main.c: 188: sendSerialByte(sampleBuffer[i].rb);
   942  00085E  5028               	movf	sendData@i,w,c
   943  000860  0D02               	mullw	2
   944  000862  0E01               	movlw	1
   945  000864  26F3               	addwf	prodl,f,c
   946  000866  0E00               	movlw	0
   947  000868  22F4               	addwfc	prodh,f,c
   948  00086A  0E01               	movlw	low _sampleBuffer
   949  00086C  24F3               	addwf	prodl,w,c
   950  00086E  6ED9               	movwf	fsr2l,c
   951  000870  0E00               	movlw	high _sampleBuffer
   952  000872  20F4               	addwfc	prodh,w,c
   953  000874  6EDA               	movwf	fsr2h,c
   954  000876  50DF               	movf	indf2,w,c
   955  000878  ECCC  F005         	call	_sendSerialByte
   956                           
   957                           ;main.c: 189: checksum ^= sampleBuffer[i].rb;
   958  00087C  5028               	movf	sendData@i,w,c
   959  00087E  0D02               	mullw	2
   960  000880  0E01               	movlw	1
   961  000882  26F3               	addwf	prodl,f,c
   962  000884  0E00               	movlw	0
   963  000886  22F4               	addwfc	prodh,f,c
   964  000888  0E01               	movlw	low _sampleBuffer
   965  00088A  24F3               	addwf	prodl,w,c
   966  00088C  6ED9               	movwf	fsr2l,c
   967  00088E  0E00               	movlw	high _sampleBuffer
   968  000890  20F4               	addwfc	prodh,w,c
   969  000892  6EDA               	movwf	fsr2h,c
   970  000894  50DF               	movf	indf2,w,c
   971  000896  1A27               	xorwf	sendData@checksum,f,c
   972  000898  2A28               	incf	sendData@i,f,c
   973  00089A  D7C8               	goto	l878
   974  00089C                     l892:
   975                           
   976                           ;main.c: 190: }
   977                           ;main.c: 191: sendSerialByte(checksum);
   978  00089C  5027               	movf	sendData@checksum,w,c
   979  00089E  ECCC  F005         	call	_sendSerialByte
   980  0008A2  0012               	return		;funcret
   981  0008A4                     __end_of_sendData:
   982                           	opt stack 0
   983                           tblptru	equ	0xFF8
   984                           tblptrh	equ	0xFF7
   985                           tblptrl	equ	0xFF6
   986                           tablat	equ	0xFF5
   987                           prodh	equ	0xFF4
   988                           prodl	equ	0xFF3
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           indf2	equ	0xFDF
   992                           postinc2	equ	0xFDE
   993                           postdec2	equ	0xFDD
   994                           fsr2h	equ	0xFDA
   995                           fsr2l	equ	0xFD9
   996                           status	equ	0xFD8
   997                           
   998 ;; *************** function _sendSerialByte *****************
   999 ;; Defined at:
  1000 ;;		line 168 in file "main.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  byte            1    wreg     unsigned char 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  byte            1    2[COMRAM] unsigned char 
  1005 ;;  time            2    0[COMRAM] unsigned int 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  2   86[None  ] unsigned int 
  1008 ;; Registers used:
  1009 ;;		wreg, status,2, status,0
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0
  1016 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1018 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1019 ;;Total ram usage:        3 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; This function calls:
  1022 ;;		Nothing
  1023 ;; This function is called by:
  1024 ;;		_sendData
  1025 ;;		_sendSerialStr
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text5
  1030  000B98                     __ptext5:
  1031                           	opt stack 0
  1032  000B98                     _sendSerialByte:
  1033                           	opt stack 28
  1034                           
  1035                           ;incstack = 0
  1036                           ;sendSerialByte@byte stored from wreg
  1037  000B98  6E26               	movwf	sendSerialByte@byte,c
  1038                           
  1039                           ;main.c: 169: TXREG = byte;
  1040  000B9A  C026  FFAD         	movff	sendSerialByte@byte,4013	;volatile
  1041  000B9E  F000               	nop		;# 
  1042                           
  1043                           ;main.c: 171: unsigned int time = 0;
  1044  000BA0  0E00               	movlw	0
  1045  000BA2  6E25               	movwf	sendSerialByte@time+1,c
  1046  000BA4  0E00               	movlw	0
  1047  000BA6  6E24               	movwf	sendSerialByte@time,c
  1048                           
  1049                           ;main.c: 172: while (!PIR1bits.TXIF) {
  1050  000BA8  D002               	goto	l730
  1051  000BAA                     l728:
  1052                           
  1053                           ;main.c: 173: time++;
  1054  000BAA  4A24               	infsnz	sendSerialByte@time,f,c
  1055  000BAC  2A25               	incf	sendSerialByte@time+1,f,c
  1056  000BAE                     l730:
  1057  000BAE  B89E               	btfsc	3998,4,c	;volatile
  1058  000BB0  0012               	return	
  1059  000BB2  D7FB               	goto	l728
  1060  000BB4                     __end_of_sendSerialByte:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           prodh	equ	0xFF4
  1067                           prodl	equ	0xFF3
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           indf2	equ	0xFDF
  1071                           postinc2	equ	0xFDE
  1072                           postdec2	equ	0xFDD
  1073                           fsr2h	equ	0xFDA
  1074                           fsr2l	equ	0xFD9
  1075                           status	equ	0xFD8
  1076                           
  1077 ;; *************** function _delayms *****************
  1078 ;; Defined at:
  1079 ;;		line 194 in file "main.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  ms              2    7[COMRAM] unsigned int 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  i               2   14[COMRAM] unsigned int 
  1084 ;;  chunks          2   11[COMRAM] unsigned int 
  1085 ;;  remainder       1   13[COMRAM] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1095 ;;      Params:         2       0       0       0       0       0       0       0       0
  1096 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1097 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1098 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1099 ;;Total ram usage:        9 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    1
  1102 ;; This function calls:
  1103 ;;		___lwdiv
  1104 ;;		___lwmod
  1105 ;; This function is called by:
  1106 ;;		_main
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text6
  1111  000932                     __ptext6:
  1112                           	opt stack 0
  1113  000932                     _delayms:
  1114                           	opt stack 29
  1115                           
  1116                           ;main.c: 196: unsigned int chunks = ms / 10;
  1117                           
  1118                           ;incstack = 0
  1119  000932  C02B  F024         	movff	delayms@ms,___lwdiv@dividend
  1120  000936  C02C  F025         	movff	delayms@ms+1,___lwdiv@dividend+1
  1121  00093A  0E00               	movlw	0
  1122  00093C  6E27               	movwf	___lwdiv@divisor+1,c
  1123  00093E  0E0A               	movlw	10
  1124  000940  6E26               	movwf	___lwdiv@divisor,c
  1125  000942  EC51  F005         	call	___lwdiv	;wreg free
  1126  000946  C024  F02F         	movff	?___lwdiv,delayms@chunks
  1127  00094A  C025  F030         	movff	?___lwdiv+1,delayms@chunks+1
  1128                           
  1129                           ;main.c: 197: unsigned char remainder = ms % 10;
  1130  00094E  C02B  F024         	movff	delayms@ms,___lwmod@dividend
  1131  000952  C02C  F025         	movff	delayms@ms+1,___lwmod@dividend+1
  1132  000956  0E00               	movlw	0
  1133  000958  6E27               	movwf	___lwmod@divisor+1,c
  1134  00095A  0E0A               	movlw	10
  1135  00095C  6E26               	movwf	___lwmod@divisor,c
  1136  00095E  EC7A  F005         	call	___lwmod	;wreg free
  1137  000962  5024               	movf	?___lwmod,w,c
  1138  000964  6E31               	movwf	delayms@remainder,c
  1139                           
  1140                           ;main.c: 198: unsigned int i;
  1141                           ;main.c: 199: for (i = 0; i < chunks; i++) {
  1142  000966  0E00               	movlw	0
  1143  000968  6E33               	movwf	delayms@i+1,c
  1144  00096A  0E00               	movlw	0
  1145  00096C  6E32               	movwf	delayms@i,c
  1146  00096E  D00A               	goto	l98
  1147  000970                     l1036:
  1148                           
  1149                           ;main.c: 200: _delay((unsigned long)((10)*(24000000/4000.0)));
  1150  000970  0E4E               	movlw	78
  1151  000972  6E2D               	movwf	??_delayms& (0+255),c
  1152  000974  0EEB               	movlw	235
  1153  000976                     u417:
  1154  000976  2EE8               	decfsz	wreg,f,c
  1155  000978  D7FE               	goto	u417
  1156  00097A  2E2D               	decfsz	??_delayms& (0+255),f,c
  1157  00097C  D7FC               	goto	u417
  1158  00097E  F000               	nop	
  1159  000980  4A32               	infsnz	delayms@i,f,c
  1160  000982  2A33               	incf	delayms@i+1,f,c
  1161  000984                     l98:
  1162  000984  502F               	movf	delayms@chunks,w,c
  1163  000986  5C32               	subwf	delayms@i,w,c
  1164  000988  5030               	movf	delayms@chunks+1,w,c
  1165  00098A  5833               	subwfb	delayms@i+1,w,c
  1166  00098C  A0D8               	btfss	status,0,c
  1167  00098E  D7F0               	goto	l1036
  1168                           
  1169                           ;main.c: 201: }
  1170                           ;main.c: 202: for(i=0;i<remainder;i++){
  1171  000990  0E00               	movlw	0
  1172  000992  6E33               	movwf	delayms@i+1,c
  1173  000994  0E00               	movlw	0
  1174  000996  6E32               	movwf	delayms@i,c
  1175  000998  D009               	goto	l101
  1176  00099A                     l1042:
  1177                           
  1178                           ;main.c: 203: _delay((unsigned long)((1)*(24000000/4000.0)));
  1179  00099A  0E08               	movlw	8
  1180  00099C  6E2D               	movwf	??_delayms& (0+255),c
  1181  00099E  0ECA               	movlw	202
  1182  0009A0                     u427:
  1183  0009A0  2EE8               	decfsz	wreg,f,c
  1184  0009A2  D7FE               	goto	u427
  1185  0009A4  2E2D               	decfsz	??_delayms& (0+255),f,c
  1186  0009A6  D7FC               	goto	u427
  1187  0009A8  4A32               	infsnz	delayms@i,f,c
  1188  0009AA  2A33               	incf	delayms@i+1,f,c
  1189  0009AC                     l101:
  1190  0009AC  5031               	movf	delayms@remainder,w,c
  1191  0009AE  6E2D               	movwf	??_delayms& (0+255),c
  1192  0009B0  6A2E               	clrf	(??_delayms+1)& (0+255),c
  1193  0009B2  502D               	movf	??_delayms,w,c
  1194  0009B4  5C32               	subwf	delayms@i,w,c
  1195  0009B6  502E               	movf	??_delayms+1,w,c
  1196  0009B8  5833               	subwfb	delayms@i+1,w,c
  1197  0009BA  B0D8               	btfsc	status,0,c
  1198  0009BC  0012               	return	
  1199  0009BE  D7ED               	goto	l1042
  1200  0009C0                     __end_of_delayms:
  1201                           	opt stack 0
  1202                           tblptru	equ	0xFF8
  1203                           tblptrh	equ	0xFF7
  1204                           tblptrl	equ	0xFF6
  1205                           tablat	equ	0xFF5
  1206                           prodh	equ	0xFF4
  1207                           prodl	equ	0xFF3
  1208                           postinc0	equ	0xFEE
  1209                           wreg	equ	0xFE8
  1210                           indf2	equ	0xFDF
  1211                           postinc2	equ	0xFDE
  1212                           postdec2	equ	0xFDD
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           status	equ	0xFD8
  1216                           
  1217 ;; *************** function ___lwmod *****************
  1218 ;; Defined at:
  1219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;  dividend        2    0[COMRAM] unsigned int 
  1222 ;;  divisor         2    2[COMRAM] unsigned int 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;  counter         1    4[COMRAM] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  2    0[COMRAM] unsigned int 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         4       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        5 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; This function calls:
  1241 ;;		Nothing
  1242 ;; This function is called by:
  1243 ;;		_delayms
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text7
  1248  000AF4                     __ptext7:
  1249                           	opt stack 0
  1250  000AF4                     ___lwmod:
  1251                           	opt stack 29
  1252                           
  1253                           ;incstack = 0
  1254  000AF4  5026               	movf	___lwmod@divisor,w,c
  1255  000AF6  1027               	iorwf	___lwmod@divisor+1,w,c
  1256  000AF8  B4D8               	btfsc	status,2,c
  1257  000AFA  D018               	goto	l523
  1258  000AFC  0E01               	movlw	1
  1259  000AFE  6E28               	movwf	___lwmod@counter,c
  1260  000B00  D004               	goto	l966
  1261  000B02                     l964:
  1262  000B02  90D8               	bcf	status,0,c
  1263  000B04  3626               	rlcf	___lwmod@divisor,f,c
  1264  000B06  3627               	rlcf	___lwmod@divisor+1,f,c
  1265  000B08  2A28               	incf	___lwmod@counter,f,c
  1266  000B0A                     l966:
  1267  000B0A  AE27               	btfss	___lwmod@divisor+1,7,c
  1268  000B0C  D7FA               	goto	l964
  1269  000B0E                     l968:
  1270  000B0E  5026               	movf	___lwmod@divisor,w,c
  1271  000B10  5C24               	subwf	___lwmod@dividend,w,c
  1272  000B12  5027               	movf	___lwmod@divisor+1,w,c
  1273  000B14  5825               	subwfb	___lwmod@dividend+1,w,c
  1274  000B16  A0D8               	btfss	status,0,c
  1275  000B18  D004               	goto	l972
  1276  000B1A  5026               	movf	___lwmod@divisor,w,c
  1277  000B1C  5E24               	subwf	___lwmod@dividend,f,c
  1278  000B1E  5027               	movf	___lwmod@divisor+1,w,c
  1279  000B20  5A25               	subwfb	___lwmod@dividend+1,f,c
  1280  000B22                     l972:
  1281  000B22  90D8               	bcf	status,0,c
  1282  000B24  3227               	rrcf	___lwmod@divisor+1,f,c
  1283  000B26  3226               	rrcf	___lwmod@divisor,f,c
  1284  000B28  2E28               	decfsz	___lwmod@counter,f,c
  1285  000B2A  D7F1               	goto	l968
  1286  000B2C                     l523:
  1287  000B2C  C024  F024         	movff	___lwmod@dividend,?___lwmod
  1288  000B30  C025  F025         	movff	___lwmod@dividend+1,?___lwmod+1
  1289  000B34  0012               	return		;funcret
  1290  000B36                     __end_of___lwmod:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           prodh	equ	0xFF4
  1297                           prodl	equ	0xFF3
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           indf2	equ	0xFDF
  1301                           postinc2	equ	0xFDE
  1302                           postdec2	equ	0xFDD
  1303                           fsr2h	equ	0xFDA
  1304                           fsr2l	equ	0xFD9
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function ___lwdiv *****************
  1308 ;; Defined at:
  1309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  dividend        2    0[COMRAM] unsigned int 
  1312 ;;  divisor         2    2[COMRAM] unsigned int 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  quotient        2    4[COMRAM] unsigned int 
  1315 ;;  counter         1    6[COMRAM] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  2    0[COMRAM] unsigned int 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1325 ;;      Params:         4       0       0       0       0       0       0       0       0
  1326 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1328 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1329 ;;Total ram usage:        7 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_delayms
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text8
  1339  000AA2                     __ptext8:
  1340                           	opt stack 0
  1341  000AA2                     ___lwdiv:
  1342                           	opt stack 29
  1343                           
  1344                           ;incstack = 0
  1345  000AA2  0E00               	movlw	0
  1346  000AA4  6E29               	movwf	___lwdiv@quotient+1,c
  1347  000AA6  0E00               	movlw	0
  1348  000AA8  6E28               	movwf	___lwdiv@quotient,c
  1349  000AAA  5026               	movf	___lwdiv@divisor,w,c
  1350  000AAC  1027               	iorwf	___lwdiv@divisor+1,w,c
  1351  000AAE  B4D8               	btfsc	status,2,c
  1352  000AB0  D01C               	goto	l513
  1353  000AB2  0E01               	movlw	1
  1354  000AB4  6E2A               	movwf	___lwdiv@counter,c
  1355  000AB6  D004               	goto	l946
  1356  000AB8                     l944:
  1357  000AB8  90D8               	bcf	status,0,c
  1358  000ABA  3626               	rlcf	___lwdiv@divisor,f,c
  1359  000ABC  3627               	rlcf	___lwdiv@divisor+1,f,c
  1360  000ABE  2A2A               	incf	___lwdiv@counter,f,c
  1361  000AC0                     l946:
  1362  000AC0  AE27               	btfss	___lwdiv@divisor+1,7,c
  1363  000AC2  D7FA               	goto	l944
  1364  000AC4                     l948:
  1365  000AC4  90D8               	bcf	status,0,c
  1366  000AC6  3628               	rlcf	___lwdiv@quotient,f,c
  1367  000AC8  3629               	rlcf	___lwdiv@quotient+1,f,c
  1368  000ACA  5026               	movf	___lwdiv@divisor,w,c
  1369  000ACC  5C24               	subwf	___lwdiv@dividend,w,c
  1370  000ACE  5027               	movf	___lwdiv@divisor+1,w,c
  1371  000AD0  5825               	subwfb	___lwdiv@dividend+1,w,c
  1372  000AD2  A0D8               	btfss	status,0,c
  1373  000AD4  D005               	goto	l956
  1374  000AD6  5026               	movf	___lwdiv@divisor,w,c
  1375  000AD8  5E24               	subwf	___lwdiv@dividend,f,c
  1376  000ADA  5027               	movf	___lwdiv@divisor+1,w,c
  1377  000ADC  5A25               	subwfb	___lwdiv@dividend+1,f,c
  1378  000ADE  8028               	bsf	___lwdiv@quotient,0,c
  1379  000AE0                     l956:
  1380  000AE0  90D8               	bcf	status,0,c
  1381  000AE2  3227               	rrcf	___lwdiv@divisor+1,f,c
  1382  000AE4  3226               	rrcf	___lwdiv@divisor,f,c
  1383  000AE6  2E2A               	decfsz	___lwdiv@counter,f,c
  1384  000AE8  D7ED               	goto	l948
  1385  000AEA                     l513:
  1386  000AEA  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  1387  000AEE  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1388  000AF2  0012               	return		;funcret
  1389  000AF4                     __end_of___lwdiv:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodh	equ	0xFF4
  1396                           prodl	equ	0xFF3
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           indf2	equ	0xFDF
  1400                           postinc2	equ	0xFDE
  1401                           postdec2	equ	0xFDD
  1402                           fsr2h	equ	0xFDA
  1403                           fsr2l	equ	0xFD9
  1404                           status	equ	0xFD8
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           prodh	equ	0xFF4
  1410                           prodl	equ	0xFF3
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           indf2	equ	0xFDF
  1414                           postinc2	equ	0xFDE
  1415                           postdec2	equ	0xFDD
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420                           	psect	rparam
  1421  0000                     tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           postinc0	equ	0xFEE
  1428                           wreg	equ	0xFE8
  1429                           indf2	equ	0xFDF
  1430                           postinc2	equ	0xFDE
  1431                           postdec2	equ	0xFDD
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        2
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     24      61
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sendSerialStr@str	PTR const unsigned char  size(2) Largest target is 8
		 -> setup@readyStr(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_setup
    _setup->_sendSerialStr
    _sendSerialStr->_sendSerialByte
    _sendData->_sendSerialByte
    _delayms->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1374
                                             19 COMRAM     5     5      0
                            _delayms
                           _sendData
                              _setup
                        _takeReading
 ---------------------------------------------------------------------------------
 (1) _takeReading                                          1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                9     9      0     330
                                             10 COMRAM     9     9      0
                      _sendSerialStr
 ---------------------------------------------------------------------------------
 (2) _sendSerialStr                                        7     4      3     238
                                              3 COMRAM     7     4      3
                     _sendSerialByte
 ---------------------------------------------------------------------------------
 (1) _sendData                                             2     2      0     125
                                              3 COMRAM     2     2      0
                     _sendSerialByte
 ---------------------------------------------------------------------------------
 (3) _sendSerialByte                                       3     3      0      20
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _delayms                                              9     7      2     779
                                              7 COMRAM     9     7      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delayms
     ___lwdiv
     ___lwmod
   _sendData
     _sendSerialByte
   _setup
     _sendSerialStr
       _sendSerialByte
   _takeReading

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     18      3D       1       64.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      20        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 07 17:31:38 2016

       sendData@checksum 0027                       l64 0A0C                       l57 09C4  
                     l58 0A24                       l98 0984              __CFG_BOR$ON 000000  
            __CFG_BORV$0 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000              __CFG_LVP$ON 000000              __CFG_WDT$ON 000000  
                    l101 09AC                      l513 0AEA                      l523 0B2C  
                    l730 0BAE                      l728 0BAA                      l932 0B40  
                    l852 0A62                      l944 0AB8                      l936 0B56  
                    l946 0AC0                      l882 0834                      l956 0AE0  
                    l948 0AC4                      l972 0B22                      l964 0B02  
                    l892 089C                      l966 0B0A                      l878 082C  
                    l968 0B0E             __CFG_CPB$OFF 000000                      u310 0916  
                    u407 09F6                      u417 0976             __CFG_CPD$OFF 000000  
                    u427 09A0                      u397 09DA                      prod 000FF3  
                    wreg 000FE8             __CFG_FOSC$HS 000000                     l1022 08EC  
                   l1042 099A                     l1018 08E4                     l1036 0970  
                   l1028 0908                     l1060 09EC                     l1062 09F0  
                   l1054 09D4                     l1074 0A1C                     l1068 0A08  
           __CFG_WDTPS$1 000000                     _main 09C0                     _mode 0023  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000010            __CFG_PLLDIV$6 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0024          __end_of___lwdiv 0AF4  
        __end_of___lwmod 0B36                    _RCREG 000FAE             main@newDelay 003A  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _PORTB 000F81                    _PORTD 000F83            __CFG_USBDIV$1 000000  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
        __end_of_delayms 09C0            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000    __end_of_sendSerialStr 0B6A           __CFG_EBTRB$OFF 000000  
                  _setup 08A4                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000             ?_takeReading 0024          __initialization 0B6A  
           __end_of_main 0A3E           _sendSerialByte 0B98                   ??_main 0037  
          __activetblptr 000002       __end_ofsetup@F4306 0809                   _ADCON1 000FC1  
                 ?_setup 0024                   _SPBRGH 000FB0            main@errorFlag 0039  
         __CFG_VREGEN$ON 000000           __CFG_XINST$OFF 000000   __end_of_sendSerialByte 0BB4  
         __CFG_STVREN$ON 000000                ??___lwdiv 0028                ??___lwmod 0028  
                 clear_0 0B88                ??_delayms 002D         __end_of_sendData 08A4  
           __pdataCOMRAM 003C             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   setup@i 0036  
    _lastSampleTimestamp 0021               __accesstop 0060  __end_of__initialization 0B8E  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0024  
     sendSerialByte@byte 0026       sendSerialByte@time 0024          ?_sendSerialByte 0024  
          __end_of_setup 0932                  ??_setup 002E         sendSerialStr@num 0029  
       sendSerialStr@str 0027     __size_of_takeReading 0064                ?_sendData 0024  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 0AA2  
                ___lwmod 0AF4             __psmallconst 0800                  __pcinit 0B6A  
                __ramtop 0800                  _delayms 0932                  __ptext0 09C0  
                __ptext1 0A3E                  __ptext2 08A4                  __ptext3 0B36  
                __ptext4 080A                  __ptext5 0B98                  __ptext6 0932  
                __ptext7 0AF4                  __ptext8 0AA2                _T0CONbits 000FD5  
   end_of_initialization 0B8E            __Lmediumconst 0000               ??_sendData 0027  
              _RCSTAbits 000FAB                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE   __size_of_sendSerialStr 0034                _PORTCbits 000F82  
              _TRISCbits 000F94                _TXSTAbits 000FAC         ??_sendSerialByte 0024  
            _BAUDCONbits 000FB8            __pidataCOMRAM 0BB4      start_initialization 0B6A  
          _sendSerialStr 0B36             takeReading@i 0024            delayms@chunks 002F  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0001           ?_sendSerialStr 0027  
          ??_takeReading 0024         ___lwdiv@dividend 0024          main@commandByte 0038  
      __size_of_sendData 009A                 ?___lwdiv 0024                 ?___lwmod 0024  
               ?_delayms 002B              __smallconst 0800         ___lwdiv@quotient 0028  
         __size_of_setup 008E         delayms@remainder 0031                delayms@ms 002B  
             setup@F4306 0801                 _PIR1bits 000F9E      __end_of_takeReading 0AA2  
             _ADCON0bits 000FC2          ??_sendSerialStr 002A             _sampleBuffer 0001  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lwdiv 0052  
       __size_of___lwmod 0042         __size_of_delayms 008E                sendData@i 0028  
         sendSerialStr@i 002C          ___lwdiv@divisor 0026          ___lwdiv@counter 002A  
          __size_of_main 007E                 _sendData 080A              _takeReading 0A3E  
               delayms@i 0032    __CFG_CPUDIV$OSC1_PLL2 000000              _sampleDelay 003C  
       ___lwmod@dividend 0024  __size_of_sendSerialByte 001C          ___lwmod@divisor 0026  
        ___lwmod@counter 0028            setup@readyStr 002E  
