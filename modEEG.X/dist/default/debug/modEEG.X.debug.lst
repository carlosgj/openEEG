

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec 02 15:19:11 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4458
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23                           	dabs	1,0x404,16,_BD1STAT
    24                           	dabs	1,0x408,16,_BD2STAT
    25                           	dabs	1,0x40C,16,_BD3STAT
    26                           	dabs	1,0x403,1,_BD0ADRH
    27                           	dabs	1,0x402,1,_BD0ADRL
    28                           	dabs	1,0x401,1,_BD0CNT
    29                           	dabs	1,0x407,1,_BD1ADRH
    30                           	dabs	1,0x406,1,_BD1ADRL
    31                           	dabs	1,0x405,1,_BD1CNT
    32                           	dabs	1,0x40B,1,_BD2ADRH
    33                           	dabs	1,0x40A,1,_BD2ADRL
    34                           	dabs	1,0x409,1,_BD2CNT
    35                           	dabs	1,0x40F,1,_BD3ADRH
    36                           	dabs	1,0x40E,1,_BD3ADRL
    37                           	dabs	1,0x40D,1,_BD3CNT
    38                           	dabs	1,0x400,16,_BD0STAT
    39  0000                     
    40                           	psect	idataCOMRAM
    41  000BE0                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _sampleDelay
    45  000BE0  0064               	dw	100
    46                           
    47                           	psect	smallconst
    48  000800                     __psmallconst:
    49                           	opt stack 0
    50  000800  00                 	db	0
    51  000801                     setup@F4336:
    52                           	opt stack 0
    53  000801  52                 	db	82
    54  000802  65                 	db	101
    55  000803  61                 	db	97
    56  000804  64                 	db	100
    57  000805  79                 	db	121
    58  000806  21                 	db	33
    59  000807  0A                 	db	10
    60  000808  00                 	db	0
    61  000809                     __end_ofsetup@F4336:
    62                           	opt stack 0
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON1	set	4033
    65  0000                     _BAUDCONbits	set	4024
    66  0000                     _PIR1bits	set	3998
    67  0000                     _PORTCbits	set	3970
    68  0000                     _RCREG	set	4014
    69  0000                     _RCSTAbits	set	4011
    70  0000                     _SPBRG	set	4015
    71  0000                     _SPBRGH	set	4016
    72  0000                     _T0CONbits	set	4053
    73  0000                     _TMR0H	set	4055
    74  0000                     _TMR0L	set	4054
    75  0000                     _TRISCbits	set	3988
    76  0000                     _TXREG	set	4013
    77  0000                     _TXSTAbits	set	4012
    78  0000                     _UCFGbits	set	3951
    79  0000                     _UEP0bits	set	3952
    80                           
    81                           ; #config settings
    82  000809  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  000B6A                     __pcinit:
    86                           	opt stack 0
    87  000B6A                     start_initialization:
    88                           	opt stack 0
    89  000B6A                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Initialize objects allocated to COMRAM (2 bytes)
    93                           ; load TBLPTR registers with __pidataCOMRAM
    94  000B6A  0EE0               	movlw	low __pidataCOMRAM
    95  000B6C  6EF6               	movwf	tblptrl,c
    96  000B6E  0E0B               	movlw	high __pidataCOMRAM
    97  000B70  6EF7               	movwf	tblptrh,c
    98  000B72  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    99  000B74  6EF8               	movwf	tblptru,c
   100  000B76  0009               	tblrd		*+	;fetch initializer
   101  000B78  CFF5 F03C          	movff	tablat,__pdataCOMRAM
   102  000B7C  0009               	tblrd		*+	;fetch initializer
   103  000B7E  CFF5 F03D          	movff	tablat,__pdataCOMRAM+1
   104                           
   105                           ; Clear objects allocated to COMRAM (35 bytes)
   106  000B82  EE00  F001         	lfsr	0,__pbssCOMRAM
   107  000B86  0E23               	movlw	35
   108  000B88                     clear_0:
   109  000B88  6AEE               	clrf	postinc0,c
   110  000B8A  06E8               	decf	wreg,f,c
   111  000B8C  E1FD               	bnz	clear_0
   112  000B8E                     end_of_initialization:
   113                           	opt stack 0
   114  000B8E                     __end_of__initialization:
   115                           	opt stack 0
   116  000B8E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   117  000B90  6EF8               	movwf	tblptru,c
   118  000B92  0100               	movlb	0
   119  000B94  EFE2  F004         	goto	_main	;jump to C main() function
   120                           tblptru	equ	0xFF8
   121                           tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           
   127                           	psect	bssCOMRAM
   128  000001                     __pbssCOMRAM:
   129                           	opt stack 0
   130  000001                     _sampleBuffer:
   131                           	opt stack 0
   132  000001                     	ds	32
   133  000021                     _lastSampleTimestamp:
   134                           	opt stack 0
   135  000021                     	ds	2
   136  000023                     _mode:
   137                           	opt stack 0
   138  000023                     	ds	1
   139                           tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           tblptrl	equ	0xFF6
   142                           tablat	equ	0xFF5
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           
   146                           	psect	dataCOMRAM
   147  00003C                     __pdataCOMRAM:
   148                           	opt stack 0
   149  00003C                     _sampleDelay:
   150                           	opt stack 0
   151  00003C                     	ds	2
   152                           tblptru	equ	0xFF8
   153                           tblptrh	equ	0xFF7
   154                           tblptrl	equ	0xFF6
   155                           tablat	equ	0xFF5
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           
   159                           	psect	cstackCOMRAM
   160  000024                     __pcstackCOMRAM:
   161                           	opt stack 0
   162  000024                     ?___lwdiv:
   163                           	opt stack 0
   164  000024                     ?___lwmod:
   165                           	opt stack 0
   166  000024                     takeReading@i:
   167                           	opt stack 0
   168  000024                     sendSerialByte@time:
   169                           	opt stack 0
   170  000024                     ___lwdiv@dividend:
   171                           	opt stack 0
   172  000024                     ___lwmod@dividend:
   173                           	opt stack 0
   174                           
   175                           ; 2 bytes @ 0x0
   176  000024                     	ds	2
   177  000026                     sendSerialByte@byte:
   178                           	opt stack 0
   179  000026                     ___lwdiv@divisor:
   180                           	opt stack 0
   181  000026                     ___lwmod@divisor:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x2
   185  000026                     	ds	1
   186  000027                     sendData@checksum:
   187                           	opt stack 0
   188  000027                     sendSerialStr@str:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x3
   192  000027                     	ds	1
   193  000028                     sendData@i:
   194                           	opt stack 0
   195  000028                     ___lwmod@counter:
   196                           	opt stack 0
   197  000028                     ___lwdiv@quotient:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x4
   201  000028                     	ds	1
   202  000029                     sendSerialStr@num:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x5
   206  000029                     	ds	1
   207  00002A                     ??_sendSerialStr:
   208  00002A                     ___lwdiv@counter:
   209                           	opt stack 0
   210                           
   211                           ; 1 bytes @ 0x6
   212  00002A                     	ds	1
   213  00002B                     delayms@ms:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x7
   217  00002B                     	ds	1
   218  00002C                     sendSerialStr@i:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x8
   222  00002C                     	ds	1
   223  00002D                     ??_delayms:
   224                           
   225                           ; 1 bytes @ 0x9
   226  00002D                     	ds	1
   227  00002E                     setup@readyStr:
   228                           	opt stack 0
   229                           
   230                           ; 8 bytes @ 0xA
   231  00002E                     	ds	1
   232  00002F                     delayms@chunks:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0xB
   236  00002F                     	ds	2
   237  000031                     delayms@remainder:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0xD
   241  000031                     	ds	1
   242  000032                     delayms@i:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0xE
   246  000032                     	ds	4
   247  000036                     setup@i:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x12
   251  000036                     	ds	1
   252  000037                     ??_main:
   253                           
   254                           ; 1 bytes @ 0x13
   255  000037                     	ds	1
   256  000038                     main@commandByte:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x14
   260  000038                     	ds	1
   261  000039                     main@errorFlag:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x15
   265  000039                     	ds	1
   266  00003A                     main@newDelay:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x16
   270  00003A                     	ds	2
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278 ;;
   279 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   280 ;;
   281 ;; *************** function _main *****************
   282 ;; Defined at:
   283 ;;		line 27 in file "main.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;  newDelay        2   22[COMRAM] struct inttime
   288 ;;  errorFlag       1   21[COMRAM] unsigned char 
   289 ;;  commandByte     1   20[COMRAM] unsigned char 
   290 ;; Return value:  Size  Location     Type
   291 ;;                  1    wreg      void 
   292 ;; Registers used:
   293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   294 ;; Tracked objects:
   295 ;;		On entry : 0/0
   296 ;;		On exit  : 0/0
   297 ;;		Unchanged: 0/0
   298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   299 ;;      Params:         0       0       0       0       0       0       0       0       0
   300 ;;      Locals:         4       0       0       0       0       0       0       0       0
   301 ;;      Temps:          1       0       0       0       0       0       0       0       0
   302 ;;      Totals:         5       0       0       0       0       0       0       0       0
   303 ;;Total ram usage:        5 bytes
   304 ;; Hardware stack levels required when called:    3
   305 ;; This function calls:
   306 ;;		_delayms
   307 ;;		_sendData
   308 ;;		_setup
   309 ;;		_takeReading
   310 ;; This function is called by:
   311 ;;		Startup code after reset
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	text0
   316  0009C4                     __ptext0:
   317                           	opt stack 0
   318  0009C4                     _main:
   319                           	opt stack 28
   320                           
   321                           ;main.c: 28: setup();
   322                           
   323                           ;incstack = 0
   324  0009C4  EC52  F004         	call	_setup	;wreg free
   325  0009C8                     l87:
   326  0009C8  0004               	clrwdt		;# 
   327                           
   328                           ;main.c: 31: if(PIR1bits.RCIF){
   329  0009CA  AA9E               	btfss	3998,5,c	;volatile
   330  0009CC  D02D               	goto	l88
   331                           
   332                           ;main.c: 32: unsigned char commandByte = RCREG;
   333  0009CE  CFAE F038          	movff	4014,main@commandByte	;volatile
   334                           
   335                           ;main.c: 33: union inttime newDelay;
   336                           ;main.c: 34: char errorFlag=0;
   337  0009D2  0E00               	movlw	0
   338  0009D4  6E39               	movwf	main@errorFlag,c
   339                           
   340                           ;main.c: 35: switch(commandByte){
   341  0009D6  D024               	goto	l1173
   342  0009D8                     l1153:
   343                           
   344                           ;main.c: 46: _delay((unsigned long)((1)*(24000000/4000.0)));
   345  0009D8  0E08               	movlw	8
   346  0009DA  6E37               	movwf	??_main& (0+255),c
   347  0009DC  0ECA               	movlw	202
   348  0009DE                     u397:
   349  0009DE  2EE8               	decfsz	wreg,f,c
   350  0009E0  D7FE               	goto	u397
   351  0009E2  2E37               	decfsz	??_main& (0+255),f,c
   352  0009E4  D7FC               	goto	u397
   353                           
   354                           ;main.c: 47: if(PIR1bits.RCIF){
   355  0009E6  AA9E               	btfss	3998,5,c	;volatile
   356  0009E8  D003               	goto	l1159
   357                           
   358                           ;main.c: 48: newDelay.upper=RCREG;
   359  0009EA  CFAE F03B          	movff	4014,main@newDelay+1	;volatile
   360                           
   361                           ;main.c: 49: }
   362  0009EE  D002               	goto	l1161
   363  0009F0                     l1159:
   364                           
   365                           ;main.c: 50: else{
   366                           ;main.c: 51: errorFlag = 1;
   367  0009F0  0E01               	movlw	1
   368  0009F2  6E39               	movwf	main@errorFlag,c
   369  0009F4                     l1161:
   370                           
   371                           ;main.c: 52: }
   372                           ;main.c: 53: _delay((unsigned long)((1)*(24000000/4000.0)));
   373  0009F4  0E08               	movlw	8
   374  0009F6  6E37               	movwf	??_main& (0+255),c
   375  0009F8  0ECA               	movlw	202
   376  0009FA                     u407:
   377  0009FA  2EE8               	decfsz	wreg,f,c
   378  0009FC  D7FE               	goto	u407
   379  0009FE  2E37               	decfsz	??_main& (0+255),f,c
   380  000A00  D7FC               	goto	u407
   381                           
   382                           ;main.c: 54: if(PIR1bits.RCIF){
   383  000A02  AA9E               	btfss	3998,5,c	;volatile
   384  000A04  D003               	goto	l1167
   385                           
   386                           ;main.c: 55: newDelay.lower=RCREG;
   387  000A06  CFAE F03A          	movff	4014,main@newDelay	;volatile
   388                           
   389                           ;main.c: 56: }
   390  000A0A  D002               	goto	l94
   391  000A0C                     l1167:
   392                           
   393                           ;main.c: 57: else{
   394                           ;main.c: 58: errorFlag = 1;
   395  000A0C  0E01               	movlw	1
   396  000A0E  6E39               	movwf	main@errorFlag,c
   397  000A10                     l94:
   398                           
   399                           ;main.c: 59: }
   400                           ;main.c: 60: if(!errorFlag){
   401  000A10  5039               	movf	main@errorFlag,w,c
   402  000A12  A4D8               	btfss	status,2,c
   403  000A14  D009               	goto	l88
   404                           
   405                           ;main.c: 61: sampleDelay = newDelay.all;
   406  000A16  C03A  F03C         	movff	main@newDelay,_sampleDelay
   407  000A1A  C03B  F03D         	movff	main@newDelay+1,_sampleDelay+1
   408                           
   409                           ;main.c: 70: }
   410                           
   411                           ;main.c: 69: break;
   412                           
   413                           ;main.c: 67: default:
   414                           
   415                           ;main.c: 65: }
   416                           ;main.c: 66: break;
   417                           
   418                           ;main.c: 63: else{
   419                           
   420                           ;main.c: 62: }
   421  000A1E  D004               	goto	l88
   422  000A20                     l1173:
   423  000A20  5038               	movf	main@commandByte,w,c
   424                           
   425                           ; Switch size 1, requested type "space"
   426                           ; Number of cases is 1, Range of values is 163 to 163
   427                           ; switch strategies available:
   428                           ; Name         Instructions Cycles
   429                           ; simple_byte            4     3 (average)
   430                           ;	Chosen strategy is simple_byte
   431  000A22  0AA3               	xorlw	163	; case 163
   432  000A24  B4D8               	btfsc	status,2,c
   433  000A26  D7D8               	goto	l1153
   434  000A28                     l88:
   435                           
   436                           ;main.c: 71: }
   437                           ;main.c: 84: if(PORTCbits.RC2){
   438  000A28  A482               	btfss	3970,2,c	;volatile
   439  000A2A  D7CE               	goto	l87
   440                           
   441                           ;main.c: 85: delayms(sampleDelay);
   442  000A2C  C03C  F02B         	movff	_sampleDelay,delayms@ms
   443  000A30  C03D  F02C         	movff	_sampleDelay+1,delayms@ms+1
   444  000A34  EC9B  F004         	call	_delayms	;wreg free
   445                           
   446                           ;main.c: 86: takeReading();
   447  000A38  EC21  F005         	call	_takeReading	;wreg free
   448                           
   449                           ;main.c: 87: sendData();
   450  000A3C  EC05  F004         	call	_sendData	;wreg free
   451  000A40  D7C3               	goto	l87
   452  000A42                     __end_of_main:
   453                           	opt stack 0
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           status	equ	0xFD8
   461                           
   462 ;; *************** function _takeReading *****************
   463 ;; Defined at:
   464 ;;		line 129 in file "main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  i               1    0[COMRAM] unsigned char 
   469 ;; Return value:  Size  Location     Type
   470 ;;                  1    wreg      void 
   471 ;; Registers used:
   472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   473 ;; Tracked objects:
   474 ;;		On entry : 0/0
   475 ;;		On exit  : 0/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   478 ;;      Params:         0       0       0       0       0       0       0       0       0
   479 ;;      Locals:         1       0       0       0       0       0       0       0       0
   480 ;;      Temps:          0       0       0       0       0       0       0       0       0
   481 ;;      Totals:         1       0       0       0       0       0       0       0       0
   482 ;;Total ram usage:        1 bytes
   483 ;; Hardware stack levels used:    1
   484 ;; This function calls:
   485 ;;		Nothing
   486 ;; This function is called by:
   487 ;;		_main
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           	psect	text1
   492  000A42                     __ptext1:
   493                           	opt stack 0
   494  000A42                     _takeReading:
   495                           	opt stack 30
   496                           
   497                           ;main.c: 130: PORTCbits.RC1 = 1;
   498                           
   499                           ;incstack = 0
   500  000A42  8282               	bsf	3970,1,c	;volatile
   501                           
   502                           ;main.c: 131: lastSampleTimestamp.lower = TMR0L;
   503  000A44  CFD6 F021          	movff	4054,_lastSampleTimestamp	;volatile
   504                           
   505                           ;main.c: 132: lastSampleTimestamp.upper = TMR0H;
   506  000A48  CFD7 F022          	movff	4055,_lastSampleTimestamp+1	;volatile
   507                           
   508                           ;main.c: 133: PORTCbits.RC0 = 1;
   509  000A4C  8082               	bsf	3970,0,c	;volatile
   510  000A4E  F000               	nop		;# 
   511  000A50  F000               	nop		;# 
   512  000A52  F000               	nop		;# 
   513  000A54  F000               	nop		;# 
   514                           
   515                           ;main.c: 139: PORTCbits.RC1 = 0;
   516  000A56  9282               	bcf	3970,1,c	;volatile
   517  000A58  F000               	nop		;# 
   518                           
   519                           ;main.c: 146: sampleBuffer[15].rd = 0xff;
   520  000A5A  681F               	setf	_sampleBuffer+30,c
   521                           
   522                           ;main.c: 147: sampleBuffer[15].rb = 0xff;
   523  000A5C  6820               	setf	_sampleBuffer+31,c
   524                           
   525                           ;main.c: 154: unsigned char i = 15;
   526  000A5E  0E0F               	movlw	15
   527  000A60  6E24               	movwf	takeReading@i,c
   528  000A62                     l949:
   529                           
   530                           ;main.c: 156: i--;
   531  000A62  0624               	decf	takeReading@i,f,c
   532                           
   533                           ;main.c: 157: PORTCbits.RC0 = 0;
   534  000A64  9082               	bcf	3970,0,c	;volatile
   535  000A66  F000               	nop		;# 
   536                           
   537                           ;main.c: 161: sampleBuffer[i].rd = 0xff;
   538  000A68  5024               	movf	takeReading@i,w,c
   539  000A6A  0D02               	mullw	2
   540  000A6C  0E01               	movlw	low _sampleBuffer
   541  000A6E  24F3               	addwf	prodl,w,c
   542  000A70  6ED9               	movwf	fsr2l,c
   543  000A72  0E00               	movlw	high _sampleBuffer
   544  000A74  20F4               	addwfc	prodh,w,c
   545  000A76  6EDA               	movwf	fsr2h,c
   546  000A78  0EFF               	movlw	255
   547  000A7A  6EDF               	movwf	indf2,c
   548                           
   549                           ;main.c: 162: sampleBuffer[i].rb = 0xff;
   550  000A7C  5024               	movf	takeReading@i,w,c
   551  000A7E  0D02               	mullw	2
   552  000A80  0E01               	movlw	1
   553  000A82  26F3               	addwf	prodl,f,c
   554  000A84  0E00               	movlw	0
   555  000A86  22F4               	addwfc	prodh,f,c
   556  000A88  0E01               	movlw	low _sampleBuffer
   557  000A8A  24F3               	addwf	prodl,w,c
   558  000A8C  6ED9               	movwf	fsr2l,c
   559  000A8E  0E00               	movlw	high _sampleBuffer
   560  000A90  20F4               	addwfc	prodh,w,c
   561  000A92  6EDA               	movwf	fsr2h,c
   562  000A94  0EFF               	movlw	255
   563  000A96  6EDF               	movwf	indf2,c
   564                           
   565                           ;main.c: 167: PORTCbits.RC0 = 1;
   566  000A98  8082               	bsf	3970,0,c	;volatile
   567                           
   568                           ;main.c: 169: } while (i);
   569  000A9A  5024               	movf	takeReading@i,w,c
   570  000A9C  B4D8               	btfsc	status,2,c
   571  000A9E  0012               	return	
   572  000AA0  D7E0               	goto	l949
   573  000AA2                     __end_of_takeReading:
   574                           	opt stack 0
   575                           tblptru	equ	0xFF8
   576                           tblptrh	equ	0xFF7
   577                           tblptrl	equ	0xFF6
   578                           tablat	equ	0xFF5
   579                           prodh	equ	0xFF4
   580                           prodl	equ	0xFF3
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           indf2	equ	0xFDF
   584                           fsr2h	equ	0xFDA
   585                           fsr2l	equ	0xFD9
   586                           status	equ	0xFD8
   587                           
   588 ;; *************** function _setup *****************
   589 ;; Defined at:
   590 ;;		line 93 in file "main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;		None
   593 ;; Auto vars:     Size  Location     Type
   594 ;;  i               1   18[COMRAM] unsigned char 
   595 ;;  readyStr        8   10[COMRAM] const unsigned char [8]
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   605 ;;      Params:         0       0       0       0       0       0       0       0       0
   606 ;;      Locals:         9       0       0       0       0       0       0       0       0
   607 ;;      Temps:          0       0       0       0       0       0       0       0       0
   608 ;;      Totals:         9       0       0       0       0       0       0       0       0
   609 ;;Total ram usage:        9 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    2
   612 ;; This function calls:
   613 ;;		_sendSerialStr
   614 ;;		_setupUSB
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text2
   621  0008A4                     __ptext2:
   622                           	opt stack 0
   623  0008A4                     _setup:
   624                           	opt stack 28
   625                           
   626                           ;main.c: 94: ADCON0bits.ADON = 0;
   627                           
   628                           ;incstack = 0
   629  0008A4  90C2               	bcf	4034,0,c	;volatile
   630                           
   631                           ;main.c: 95: ADCON1 = 0b00001111;
   632  0008A6  0E0F               	movlw	15
   633  0008A8  6EC1               	movwf	4033,c	;volatile
   634                           
   635                           ;main.c: 96: T0CONbits.TMR0ON = 1;
   636  0008AA  8ED5               	bsf	4053,7,c	;volatile
   637                           
   638                           ;main.c: 97: T0CONbits.T08BIT = 0;
   639  0008AC  9CD5               	bcf	4053,6,c	;volatile
   640                           
   641                           ;main.c: 98: T0CONbits.T0CS = 0;
   642  0008AE  9AD5               	bcf	4053,5,c	;volatile
   643                           
   644                           ;main.c: 99: T0CONbits.PSA = 0;
   645  0008B0  96D5               	bcf	4053,3,c	;volatile
   646                           
   647                           ;main.c: 100: T0CONbits.T0PS = 0b101;
   648  0008B2  50D5               	movf	4053,w,c	;volatile
   649  0008B4  0BF8               	andlw	-8
   650  0008B6  0905               	iorlw	5
   651  0008B8  6ED5               	movwf	4053,c	;volatile
   652                           
   653                           ;main.c: 102: TRISCbits.TRISC0 = 0;
   654  0008BA  9094               	bcf	3988,0,c	;volatile
   655                           
   656                           ;main.c: 103: PORTCbits.RC0 = 1;
   657  0008BC  8082               	bsf	3970,0,c	;volatile
   658                           
   659                           ;main.c: 104: TRISCbits.TRISC1 = 0;
   660  0008BE  9294               	bcf	3988,1,c	;volatile
   661                           
   662                           ;main.c: 105: PORTCbits.RC1 = 0;
   663  0008C0  9282               	bcf	3970,1,c	;volatile
   664                           
   665                           ;main.c: 106: TRISCbits.RC2 = 1;
   666  0008C2  8494               	bsf	3988,2,c	;volatile
   667                           
   668                           ;main.c: 108: TRISCbits.TRISC6 = 1;
   669  0008C4  8C94               	bsf	3988,6,c	;volatile
   670                           
   671                           ;main.c: 109: TRISCbits.TRISC7 = 1;
   672  0008C6  8E94               	bsf	3988,7,c	;volatile
   673                           
   674                           ;main.c: 110: TXSTAbits.TX9 = 0;
   675  0008C8  9CAC               	bcf	4012,6,c	;volatile
   676                           
   677                           ;main.c: 111: TXSTAbits.TXEN = 1;
   678  0008CA  8AAC               	bsf	4012,5,c	;volatile
   679                           
   680                           ;main.c: 112: TXSTAbits.SYNC = 0;
   681  0008CC  98AC               	bcf	4012,4,c	;volatile
   682                           
   683                           ;main.c: 113: RCSTAbits.SPEN = 1;
   684  0008CE  8EAB               	bsf	4011,7,c	;volatile
   685                           
   686                           ;main.c: 114: RCSTAbits.RX9 = 0;
   687  0008D0  9CAB               	bcf	4011,6,c	;volatile
   688                           
   689                           ;main.c: 115: RCSTAbits.CREN = 1;
   690  0008D2  88AB               	bsf	4011,4,c	;volatile
   691                           
   692                           ;main.c: 116: BAUDCONbits.BRG16 = 1;
   693  0008D4  86B8               	bsf	4024,3,c	;volatile
   694                           
   695                           ;main.c: 117: TXSTAbits.BRGH = 0;
   696  0008D6  94AC               	bcf	4012,2,c	;volatile
   697                           
   698                           ;main.c: 118: SPBRGH = 0;
   699  0008D8  0E00               	movlw	0
   700  0008DA  6EB0               	movwf	4016,c	;volatile
   701                           
   702                           ;main.c: 119: SPBRG = 12;
   703  0008DC  0E0C               	movlw	12
   704  0008DE  6EAF               	movwf	4015,c	;volatile
   705                           
   706                           ;main.c: 120: for (unsigned char i = 0; i < 16; i++) {
   707  0008E0  0E00               	movlw	0
   708  0008E2  6E36               	movwf	setup@i,c
   709  0008E4                     l1115:
   710  0008E4  0E0F               	movlw	15
   711  0008E6  6436               	cpfsgt	setup@i,c
   712  0008E8  D001               	goto	l1119
   713  0008EA  D00E               	goto	l1125
   714  0008EC                     l1119:
   715                           
   716                           ;main.c: 121: sampleBuffer[i].all = (unsigned int) 0;
   717  0008EC  5036               	movf	setup@i,w,c
   718  0008EE  0D02               	mullw	2
   719  0008F0  0E01               	movlw	low _sampleBuffer
   720  0008F2  24F3               	addwf	prodl,w,c
   721  0008F4  6ED9               	movwf	fsr2l,c
   722  0008F6  0E00               	movlw	high _sampleBuffer
   723  0008F8  20F4               	addwfc	prodh,w,c
   724  0008FA  6EDA               	movwf	fsr2h,c
   725  0008FC  0E00               	movlw	0
   726  0008FE  6EDE               	movwf	postinc2,c
   727  000900  0E00               	movlw	0
   728  000902  6EDD               	movwf	postdec2,c
   729  000904  2A36               	incf	setup@i,f,c
   730  000906  D7EE               	goto	l1115
   731  000908                     l1125:
   732                           
   733                           ;main.c: 122: }
   734                           ;main.c: 123: const char readyStr[] = {"Ready!\n"};
   735  000908  0E01               	movlw	low setup@F4336
   736  00090A  6EF6               	movwf	tblptrl,c
   737  00090C                     	if	1	;There is more than 1 active tblptr byte
   738  00090C  0E08               	movlw	high setup@F4336
   739  00090E  6EF7               	movwf	tblptrh,c
   740  000910                     	endif
   741  000910                     	if	0	;There are less than 3 active tblptr bytes
   742  000910                     	endif
   743  000910  EE20  F02E         	lfsr	2,setup@readyStr
   744  000914  0E07               	movlw	7
   745  000916                     u310:
   746  000916  0009               	tblrd		*+
   747  000918  CFF5 FFDE          	movff	tablat,postinc2
   748  00091C  06E8               	decf	wreg,f,c
   749  00091E  E2FB               	bc	u310
   750                           
   751                           ;main.c: 124: sendSerialStr(readyStr, 7);
   752  000920  0E2E               	movlw	low setup@readyStr
   753  000922  6E27               	movwf	sendSerialStr@str,c
   754  000924  0E00               	movlw	high setup@readyStr
   755  000926  6E28               	movwf	sendSerialStr@str+1,c
   756  000928  0E07               	movlw	7
   757  00092A  6E29               	movwf	sendSerialStr@num,c
   758  00092C  EC9B  F005         	call	_sendSerialStr	;wreg free
   759                           
   760                           ;main.c: 126: setupUSB();
   761  000930  ECCC  F005         	call	_setupUSB	;wreg free
   762  000934  0012               	return		;funcret
   763  000936                     __end_of_setup:
   764                           	opt stack 0
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           prodh	equ	0xFF4
   770                           prodl	equ	0xFF3
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           indf2	equ	0xFDF
   774                           postinc2	equ	0xFDE
   775                           postdec2	equ	0xFDD
   776                           fsr2h	equ	0xFDA
   777                           fsr2l	equ	0xFD9
   778                           status	equ	0xFD8
   779                           
   780 ;; *************** function _setupUSB *****************
   781 ;; Defined at:
   782 ;;		line 10 in file "usb.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   796 ;;      Params:         0       0       0       0       0       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0
   799 ;;      Totals:         0       0       0       0       0       0       0       0       0
   800 ;;Total ram usage:        0 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_setup
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text3
   810  000B98                     __ptext3:
   811                           	opt stack 0
   812  000B98                     _setupUSB:
   813                           	opt stack 29
   814                           
   815                           ;usb.c: 12: UCFGbits.UPUEN=1;
   816                           
   817                           ;incstack = 0
   818  000B98  886F               	bsf	3951,4,c	;volatile
   819                           
   820                           ;usb.c: 13: UCFGbits.FSEN=1;
   821  000B9A  846F               	bsf	3951,2,c	;volatile
   822                           
   823                           ;usb.c: 14: UCFGbits.PPB=0;
   824  000B9C  0EFC               	movlw	-4
   825  000B9E  166F               	andwf	3951,f,c	;volatile
   826                           
   827                           ;usb.c: 15: UCFGbits.UOEMON=1;
   828  000BA0  8C6F               	bsf	3951,6,c	;volatile
   829                           
   830                           ;usb.c: 22: UEP0bits.EPHSHK=1;
   831  000BA2  8870               	bsf	3952,4,c	;volatile
   832                           
   833                           ;usb.c: 23: UEP0bits.EPCONDIS=0;
   834  000BA4  9670               	bcf	3952,3,c	;volatile
   835                           
   836                           ;usb.c: 24: UEP0bits.EPOUTEN=1;
   837  000BA6  8470               	bsf	3952,2,c	;volatile
   838                           
   839                           ;usb.c: 25: UEP0bits.EPINEN=1;
   840  000BA8  8270               	bsf	3952,1,c	;volatile
   841                           
   842                           ;usb.c: 26: UEP0bits.EPSTALL=0;
   843  000BAA  9070               	bcf	3952,0,c	;volatile
   844                           
   845                           ;usb.c: 29: UEP0bits.EPHSHK=0;
   846  000BAC  9870               	bcf	3952,4,c	;volatile
   847                           
   848                           ;usb.c: 30: UEP0bits.EPCONDIS=1;
   849  000BAE  8670               	bsf	3952,3,c	;volatile
   850                           
   851                           ;usb.c: 31: UEP0bits.EPOUTEN=0;
   852  000BB0  9470               	bcf	3952,2,c	;volatile
   853                           
   854                           ;usb.c: 32: UEP0bits.EPINEN=1;
   855  000BB2  8270               	bsf	3952,1,c	;volatile
   856                           
   857                           ;usb.c: 33: UEP0bits.EPSTALL=0;
   858  000BB4  9070               	bcf	3952,0,c	;volatile
   859                           
   860                           ;usb.c: 34: BD3ADRL=0x500;
   861  000BB6  0E00               	movlw	0
   862  000BB8  0104               	movlb	4	; () banked
   863  000BBA  6F0E               	movwf	14,b
   864                           
   865                           ;usb.c: 35: BD3ADRH=(unsigned char)(0x500 >> 8);
   866  000BBC  0E05               	movlw	5
   867  000BBE  0104               	movlb	4	; () banked
   868  000BC0  6F0F               	movwf	15,b
   869                           
   870                           ; BSR set to: 4
   871  000BC2  0012               	return		;funcret
   872  000BC4                     __end_of_setupUSB:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           prodh	equ	0xFF4
   879                           prodl	equ	0xFF3
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           indf2	equ	0xFDF
   883                           postinc2	equ	0xFDE
   884                           postdec2	equ	0xFDD
   885                           fsr2h	equ	0xFDA
   886                           fsr2l	equ	0xFD9
   887                           status	equ	0xFD8
   888                           
   889 ;; *************** function _sendSerialStr *****************
   890 ;; Defined at:
   891 ;;		line 211 in file "main.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  str             2    3[COMRAM] PTR const unsigned char 
   894 ;;		 -> setup@readyStr(8), 
   895 ;;  num             1    5[COMRAM] unsigned char 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  i               2    8[COMRAM] unsigned int 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   907 ;;      Params:         3       0       0       0       0       0       0       0       0
   908 ;;      Locals:         2       0       0       0       0       0       0       0       0
   909 ;;      Temps:          2       0       0       0       0       0       0       0       0
   910 ;;      Totals:         7       0       0       0       0       0       0       0       0
   911 ;;Total ram usage:        7 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    1
   914 ;; This function calls:
   915 ;;		_sendSerialByte
   916 ;; This function is called by:
   917 ;;		_setup
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text4
   922  000B36                     __ptext4:
   923                           	opt stack 0
   924  000B36                     _sendSerialStr:
   925                           	opt stack 28
   926                           
   927                           ;main.c: 212: for(unsigned int i=0; i<num; i++){
   928                           
   929                           ; BSR set to: 4
   930                           ;incstack = 0
   931  000B36  0E00               	movlw	0
   932  000B38  6E2D               	movwf	sendSerialStr@i+1,c
   933  000B3A  0E00               	movlw	0
   934  000B3C  6E2C               	movwf	sendSerialStr@i,c
   935  000B3E  D00B               	goto	l1033
   936  000B40                     l1029:
   937                           
   938                           ;main.c: 213: sendSerialByte(str[i]);
   939  000B40  502C               	movf	sendSerialStr@i,w,c
   940  000B42  2427               	addwf	sendSerialStr@str,w,c
   941  000B44  6ED9               	movwf	fsr2l,c
   942  000B46  502D               	movf	sendSerialStr@i+1,w,c
   943  000B48  2028               	addwfc	sendSerialStr@str+1,w,c
   944  000B4A  6EDA               	movwf	fsr2h,c
   945  000B4C  50DF               	movf	indf2,w,c
   946  000B4E  ECE2  F005         	call	_sendSerialByte
   947  000B52  4A2C               	infsnz	sendSerialStr@i,f,c
   948  000B54  2A2D               	incf	sendSerialStr@i+1,f,c
   949  000B56                     l1033:
   950  000B56  5029               	movf	sendSerialStr@num,w,c
   951  000B58  6E2A               	movwf	??_sendSerialStr& (0+255),c
   952  000B5A  6A2B               	clrf	(??_sendSerialStr+1)& (0+255),c
   953  000B5C  502A               	movf	??_sendSerialStr,w,c
   954  000B5E  5C2C               	subwf	sendSerialStr@i,w,c
   955  000B60  502B               	movf	??_sendSerialStr+1,w,c
   956  000B62  582D               	subwfb	sendSerialStr@i+1,w,c
   957  000B64  B0D8               	btfsc	status,0,c
   958  000B66  0012               	return	
   959  000B68  D7EB               	goto	l1029
   960  000B6A                     __end_of_sendSerialStr:
   961                           	opt stack 0
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           prodh	equ	0xFF4
   967                           prodl	equ	0xFF3
   968                           postinc0	equ	0xFEE
   969                           wreg	equ	0xFE8
   970                           indf2	equ	0xFDF
   971                           postinc2	equ	0xFDE
   972                           postdec2	equ	0xFDD
   973                           fsr2h	equ	0xFDA
   974                           fsr2l	equ	0xFD9
   975                           status	equ	0xFD8
   976                           
   977 ;; *************** function _sendData *****************
   978 ;; Defined at:
   979 ;;		line 182 in file "main.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  i               1    4[COMRAM] unsigned char 
   984 ;;  checksum        1    3[COMRAM] unsigned char 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   994 ;;      Params:         0       0       0       0       0       0       0       0       0
   995 ;;      Locals:         2       0       0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0
   997 ;;      Totals:         2       0       0       0       0       0       0       0       0
   998 ;;Total ram usage:        2 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    1
  1001 ;; This function calls:
  1002 ;;		_sendSerialByte
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text5
  1009  00080A                     __ptext5:
  1010                           	opt stack 0
  1011  00080A                     _sendData:
  1012                           	opt stack 29
  1013                           
  1014                           ;main.c: 183: unsigned char checksum=0;
  1015                           
  1016                           ;incstack = 0
  1017  00080A  0E00               	movlw	0
  1018  00080C  6E27               	movwf	sendData@checksum,c
  1019                           
  1020                           ;main.c: 184: sendSerialByte(0);
  1021  00080E  0E00               	movlw	0
  1022  000810  ECE2  F005         	call	_sendSerialByte
  1023                           
  1024                           ;main.c: 185: sendSerialByte(lastSampleTimestamp.upper);
  1025  000814  5022               	movf	_lastSampleTimestamp+1,w,c
  1026  000816  ECE2  F005         	call	_sendSerialByte
  1027                           
  1028                           ;main.c: 186: checksum ^= lastSampleTimestamp.upper;
  1029  00081A  5022               	movf	_lastSampleTimestamp+1,w,c
  1030  00081C  1A27               	xorwf	sendData@checksum,f,c
  1031                           
  1032                           ;main.c: 187: sendSerialByte(lastSampleTimestamp.lower);
  1033  00081E  5021               	movf	_lastSampleTimestamp,w,c
  1034  000820  ECE2  F005         	call	_sendSerialByte
  1035                           
  1036                           ;main.c: 188: checksum ^= lastSampleTimestamp.lower;
  1037  000824  5021               	movf	_lastSampleTimestamp,w,c
  1038  000826  1A27               	xorwf	sendData@checksum,f,c
  1039                           
  1040                           ;main.c: 189: for(unsigned char i=0;i<16;i++){
  1041  000828  0E00               	movlw	0
  1042  00082A  6E28               	movwf	sendData@i,c
  1043  00082C                     l975:
  1044  00082C  0E0F               	movlw	15
  1045  00082E  6428               	cpfsgt	sendData@i,c
  1046  000830  D001               	goto	l979
  1047  000832  D034               	goto	l989
  1048  000834                     l979:
  1049                           
  1050                           ;main.c: 190: sendSerialByte(sampleBuffer[i].rd);
  1051  000834  5028               	movf	sendData@i,w,c
  1052  000836  0D02               	mullw	2
  1053  000838  0E01               	movlw	low _sampleBuffer
  1054  00083A  24F3               	addwf	prodl,w,c
  1055  00083C  6ED9               	movwf	fsr2l,c
  1056  00083E  0E00               	movlw	high _sampleBuffer
  1057  000840  20F4               	addwfc	prodh,w,c
  1058  000842  6EDA               	movwf	fsr2h,c
  1059  000844  50DF               	movf	indf2,w,c
  1060  000846  ECE2  F005         	call	_sendSerialByte
  1061                           
  1062                           ;main.c: 191: checksum ^= sampleBuffer[i].rd;
  1063  00084A  5028               	movf	sendData@i,w,c
  1064  00084C  0D02               	mullw	2
  1065  00084E  0E01               	movlw	low _sampleBuffer
  1066  000850  24F3               	addwf	prodl,w,c
  1067  000852  6ED9               	movwf	fsr2l,c
  1068  000854  0E00               	movlw	high _sampleBuffer
  1069  000856  20F4               	addwfc	prodh,w,c
  1070  000858  6EDA               	movwf	fsr2h,c
  1071  00085A  50DF               	movf	indf2,w,c
  1072  00085C  1A27               	xorwf	sendData@checksum,f,c
  1073                           
  1074                           ;main.c: 192: sendSerialByte(sampleBuffer[i].rb);
  1075  00085E  5028               	movf	sendData@i,w,c
  1076  000860  0D02               	mullw	2
  1077  000862  0E01               	movlw	1
  1078  000864  26F3               	addwf	prodl,f,c
  1079  000866  0E00               	movlw	0
  1080  000868  22F4               	addwfc	prodh,f,c
  1081  00086A  0E01               	movlw	low _sampleBuffer
  1082  00086C  24F3               	addwf	prodl,w,c
  1083  00086E  6ED9               	movwf	fsr2l,c
  1084  000870  0E00               	movlw	high _sampleBuffer
  1085  000872  20F4               	addwfc	prodh,w,c
  1086  000874  6EDA               	movwf	fsr2h,c
  1087  000876  50DF               	movf	indf2,w,c
  1088  000878  ECE2  F005         	call	_sendSerialByte
  1089                           
  1090                           ;main.c: 193: checksum ^= sampleBuffer[i].rb;
  1091  00087C  5028               	movf	sendData@i,w,c
  1092  00087E  0D02               	mullw	2
  1093  000880  0E01               	movlw	1
  1094  000882  26F3               	addwf	prodl,f,c
  1095  000884  0E00               	movlw	0
  1096  000886  22F4               	addwfc	prodh,f,c
  1097  000888  0E01               	movlw	low _sampleBuffer
  1098  00088A  24F3               	addwf	prodl,w,c
  1099  00088C  6ED9               	movwf	fsr2l,c
  1100  00088E  0E00               	movlw	high _sampleBuffer
  1101  000890  20F4               	addwfc	prodh,w,c
  1102  000892  6EDA               	movwf	fsr2h,c
  1103  000894  50DF               	movf	indf2,w,c
  1104  000896  1A27               	xorwf	sendData@checksum,f,c
  1105  000898  2A28               	incf	sendData@i,f,c
  1106  00089A  D7C8               	goto	l975
  1107  00089C                     l989:
  1108                           
  1109                           ;main.c: 194: }
  1110                           ;main.c: 195: sendSerialByte(checksum);
  1111  00089C  5027               	movf	sendData@checksum,w,c
  1112  00089E  ECE2  F005         	call	_sendSerialByte
  1113  0008A2  0012               	return		;funcret
  1114  0008A4                     __end_of_sendData:
  1115                           	opt stack 0
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           prodh	equ	0xFF4
  1121                           prodl	equ	0xFF3
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           indf2	equ	0xFDF
  1125                           postinc2	equ	0xFDE
  1126                           postdec2	equ	0xFDD
  1127                           fsr2h	equ	0xFDA
  1128                           fsr2l	equ	0xFD9
  1129                           status	equ	0xFD8
  1130                           
  1131 ;; *************** function _sendSerialByte *****************
  1132 ;; Defined at:
  1133 ;;		line 172 in file "main.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  byte            1    wreg     unsigned char 
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  byte            1    2[COMRAM] unsigned char 
  1138 ;;  time            2    0[COMRAM] unsigned int 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  2  116[None  ] unsigned int 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1148 ;;      Params:         0       0       0       0       0       0       0       0       0
  1149 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1151 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1152 ;;Total ram usage:        3 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_sendData
  1158 ;;		_sendSerialStr
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           	psect	text6
  1163  000BC4                     __ptext6:
  1164                           	opt stack 0
  1165  000BC4                     _sendSerialByte:
  1166                           	opt stack 28
  1167                           
  1168                           ;incstack = 0
  1169                           ;sendSerialByte@byte stored from wreg
  1170  000BC4  6E26               	movwf	sendSerialByte@byte,c
  1171                           
  1172                           ;main.c: 173: TXREG = byte;
  1173  000BC6  C026  FFAD         	movff	sendSerialByte@byte,4013	;volatile
  1174  000BCA  F000               	nop		;# 
  1175                           
  1176                           ;main.c: 175: unsigned int time = 0;
  1177  000BCC  0E00               	movlw	0
  1178  000BCE  6E25               	movwf	sendSerialByte@time+1,c
  1179  000BD0  0E00               	movlw	0
  1180  000BD2  6E24               	movwf	sendSerialByte@time,c
  1181                           
  1182                           ;main.c: 176: while (!PIR1bits.TXIF) {
  1183  000BD4  D002               	goto	l799
  1184  000BD6                     l797:
  1185                           
  1186                           ;main.c: 177: time++;
  1187  000BD6  4A24               	infsnz	sendSerialByte@time,f,c
  1188  000BD8  2A25               	incf	sendSerialByte@time+1,f,c
  1189  000BDA                     l799:
  1190  000BDA  B89E               	btfsc	3998,4,c	;volatile
  1191  000BDC  0012               	return	
  1192  000BDE  D7FB               	goto	l797
  1193  000BE0                     __end_of_sendSerialByte:
  1194                           	opt stack 0
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           prodh	equ	0xFF4
  1200                           prodl	equ	0xFF3
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           indf2	equ	0xFDF
  1204                           postinc2	equ	0xFDE
  1205                           postdec2	equ	0xFDD
  1206                           fsr2h	equ	0xFDA
  1207                           fsr2l	equ	0xFD9
  1208                           status	equ	0xFD8
  1209                           
  1210 ;; *************** function _delayms *****************
  1211 ;; Defined at:
  1212 ;;		line 198 in file "main.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  ms              2    7[COMRAM] unsigned int 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  i               2   14[COMRAM] unsigned int 
  1217 ;;  chunks          2   11[COMRAM] unsigned int 
  1218 ;;  remainder       1   13[COMRAM] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1228 ;;      Params:         2       0       0       0       0       0       0       0       0
  1229 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1230 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1231 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1232 ;;Total ram usage:        9 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    1
  1235 ;; This function calls:
  1236 ;;		___lwdiv
  1237 ;;		___lwmod
  1238 ;; This function is called by:
  1239 ;;		_main
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           	psect	text7
  1244  000936                     __ptext7:
  1245                           	opt stack 0
  1246  000936                     _delayms:
  1247                           	opt stack 29
  1248                           
  1249                           ;main.c: 200: unsigned int chunks = ms / 10;
  1250                           
  1251                           ;incstack = 0
  1252  000936  C02B  F024         	movff	delayms@ms,___lwdiv@dividend
  1253  00093A  C02C  F025         	movff	delayms@ms+1,___lwdiv@dividend+1
  1254  00093E  0E00               	movlw	0
  1255  000940  6E27               	movwf	___lwdiv@divisor+1,c
  1256  000942  0E0A               	movlw	10
  1257  000944  6E26               	movwf	___lwdiv@divisor,c
  1258  000946  EC51  F005         	call	___lwdiv	;wreg free
  1259  00094A  C024  F02F         	movff	?___lwdiv,delayms@chunks
  1260  00094E  C025  F030         	movff	?___lwdiv+1,delayms@chunks+1
  1261                           
  1262                           ;main.c: 201: unsigned char remainder = ms % 10;
  1263  000952  C02B  F024         	movff	delayms@ms,___lwmod@dividend
  1264  000956  C02C  F025         	movff	delayms@ms+1,___lwmod@dividend+1
  1265  00095A  0E00               	movlw	0
  1266  00095C  6E27               	movwf	___lwmod@divisor+1,c
  1267  00095E  0E0A               	movlw	10
  1268  000960  6E26               	movwf	___lwmod@divisor,c
  1269  000962  EC7A  F005         	call	___lwmod	;wreg free
  1270  000966  5024               	movf	?___lwmod,w,c
  1271  000968  6E31               	movwf	delayms@remainder,c
  1272                           
  1273                           ;main.c: 202: unsigned int i;
  1274                           ;main.c: 203: for (i = 0; i < chunks; i++) {
  1275  00096A  0E00               	movlw	0
  1276  00096C  6E33               	movwf	delayms@i+1,c
  1277  00096E  0E00               	movlw	0
  1278  000970  6E32               	movwf	delayms@i,c
  1279  000972  D00A               	goto	l128
  1280  000974                     l1135:
  1281                           
  1282                           ;main.c: 204: _delay((unsigned long)((10)*(24000000/4000.0)));
  1283  000974  0E4E               	movlw	78
  1284  000976  6E2D               	movwf	??_delayms& (0+255),c
  1285  000978  0EEB               	movlw	235
  1286  00097A                     u417:
  1287  00097A  2EE8               	decfsz	wreg,f,c
  1288  00097C  D7FE               	goto	u417
  1289  00097E  2E2D               	decfsz	??_delayms& (0+255),f,c
  1290  000980  D7FC               	goto	u417
  1291  000982  F000               	nop	
  1292  000984  4A32               	infsnz	delayms@i,f,c
  1293  000986  2A33               	incf	delayms@i+1,f,c
  1294  000988                     l128:
  1295  000988  502F               	movf	delayms@chunks,w,c
  1296  00098A  5C32               	subwf	delayms@i,w,c
  1297  00098C  5030               	movf	delayms@chunks+1,w,c
  1298  00098E  5833               	subwfb	delayms@i+1,w,c
  1299  000990  A0D8               	btfss	status,0,c
  1300  000992  D7F0               	goto	l1135
  1301                           
  1302                           ;main.c: 205: }
  1303                           ;main.c: 206: for(i=0;i<remainder;i++){
  1304  000994  0E00               	movlw	0
  1305  000996  6E33               	movwf	delayms@i+1,c
  1306  000998  0E00               	movlw	0
  1307  00099A  6E32               	movwf	delayms@i,c
  1308  00099C  D009               	goto	l131
  1309  00099E                     l1141:
  1310                           
  1311                           ;main.c: 207: _delay((unsigned long)((1)*(24000000/4000.0)));
  1312  00099E  0E08               	movlw	8
  1313  0009A0  6E2D               	movwf	??_delayms& (0+255),c
  1314  0009A2  0ECA               	movlw	202
  1315  0009A4                     u427:
  1316  0009A4  2EE8               	decfsz	wreg,f,c
  1317  0009A6  D7FE               	goto	u427
  1318  0009A8  2E2D               	decfsz	??_delayms& (0+255),f,c
  1319  0009AA  D7FC               	goto	u427
  1320  0009AC  4A32               	infsnz	delayms@i,f,c
  1321  0009AE  2A33               	incf	delayms@i+1,f,c
  1322  0009B0                     l131:
  1323  0009B0  5031               	movf	delayms@remainder,w,c
  1324  0009B2  6E2D               	movwf	??_delayms& (0+255),c
  1325  0009B4  6A2E               	clrf	(??_delayms+1)& (0+255),c
  1326  0009B6  502D               	movf	??_delayms,w,c
  1327  0009B8  5C32               	subwf	delayms@i,w,c
  1328  0009BA  502E               	movf	??_delayms+1,w,c
  1329  0009BC  5833               	subwfb	delayms@i+1,w,c
  1330  0009BE  B0D8               	btfsc	status,0,c
  1331  0009C0  0012               	return	
  1332  0009C2  D7ED               	goto	l1141
  1333  0009C4                     __end_of_delayms:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           prodh	equ	0xFF4
  1340                           prodl	equ	0xFF3
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           indf2	equ	0xFDF
  1344                           postinc2	equ	0xFDE
  1345                           postdec2	equ	0xFDD
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function ___lwmod *****************
  1351 ;; Defined at:
  1352 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  dividend        2    0[COMRAM] unsigned int 
  1355 ;;  divisor         2    2[COMRAM] unsigned int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  counter         1    4[COMRAM] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  2    0[COMRAM] unsigned int 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2, status,0
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1367 ;;      Params:         4       0       0       0       0       0       0       0       0
  1368 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1369 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1370 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1371 ;;Total ram usage:        5 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_delayms
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text8
  1381  000AF4                     __ptext8:
  1382                           	opt stack 0
  1383  000AF4                     ___lwmod:
  1384                           	opt stack 29
  1385                           
  1386                           ;incstack = 0
  1387  000AF4  5026               	movf	___lwmod@divisor,w,c
  1388  000AF6  1027               	iorwf	___lwmod@divisor+1,w,c
  1389  000AF8  B4D8               	btfsc	status,2,c
  1390  000AFA  D018               	goto	l592
  1391  000AFC  0E01               	movlw	1
  1392  000AFE  6E28               	movwf	___lwmod@counter,c
  1393  000B00  D004               	goto	l1063
  1394  000B02                     l1061:
  1395  000B02  90D8               	bcf	status,0,c
  1396  000B04  3626               	rlcf	___lwmod@divisor,f,c
  1397  000B06  3627               	rlcf	___lwmod@divisor+1,f,c
  1398  000B08  2A28               	incf	___lwmod@counter,f,c
  1399  000B0A                     l1063:
  1400  000B0A  AE27               	btfss	___lwmod@divisor+1,7,c
  1401  000B0C  D7FA               	goto	l1061
  1402  000B0E                     l1065:
  1403  000B0E  5026               	movf	___lwmod@divisor,w,c
  1404  000B10  5C24               	subwf	___lwmod@dividend,w,c
  1405  000B12  5027               	movf	___lwmod@divisor+1,w,c
  1406  000B14  5825               	subwfb	___lwmod@dividend+1,w,c
  1407  000B16  A0D8               	btfss	status,0,c
  1408  000B18  D004               	goto	l1069
  1409  000B1A  5026               	movf	___lwmod@divisor,w,c
  1410  000B1C  5E24               	subwf	___lwmod@dividend,f,c
  1411  000B1E  5027               	movf	___lwmod@divisor+1,w,c
  1412  000B20  5A25               	subwfb	___lwmod@dividend+1,f,c
  1413  000B22                     l1069:
  1414  000B22  90D8               	bcf	status,0,c
  1415  000B24  3227               	rrcf	___lwmod@divisor+1,f,c
  1416  000B26  3226               	rrcf	___lwmod@divisor,f,c
  1417  000B28  2E28               	decfsz	___lwmod@counter,f,c
  1418  000B2A  D7F1               	goto	l1065
  1419  000B2C                     l592:
  1420  000B2C  C024  F024         	movff	___lwmod@dividend,?___lwmod
  1421  000B30  C025  F025         	movff	___lwmod@dividend+1,?___lwmod+1
  1422  000B34  0012               	return		;funcret
  1423  000B36                     __end_of___lwmod:
  1424                           	opt stack 0
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           prodh	equ	0xFF4
  1430                           prodl	equ	0xFF3
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           indf2	equ	0xFDF
  1434                           postinc2	equ	0xFDE
  1435                           postdec2	equ	0xFDD
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function ___lwdiv *****************
  1441 ;; Defined at:
  1442 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  dividend        2    0[COMRAM] unsigned int 
  1445 ;;  divisor         2    2[COMRAM] unsigned int 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  quotient        2    4[COMRAM] unsigned int 
  1448 ;;  counter         1    6[COMRAM] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  2    0[COMRAM] unsigned int 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1458 ;;      Params:         4       0       0       0       0       0       0       0       0
  1459 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1461 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1462 ;;Total ram usage:        7 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_delayms
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text9
  1472  000AA2                     __ptext9:
  1473                           	opt stack 0
  1474  000AA2                     ___lwdiv:
  1475                           	opt stack 29
  1476                           
  1477                           ;incstack = 0
  1478  000AA2  0E00               	movlw	0
  1479  000AA4  6E29               	movwf	___lwdiv@quotient+1,c
  1480  000AA6  0E00               	movlw	0
  1481  000AA8  6E28               	movwf	___lwdiv@quotient,c
  1482  000AAA  5026               	movf	___lwdiv@divisor,w,c
  1483  000AAC  1027               	iorwf	___lwdiv@divisor+1,w,c
  1484  000AAE  B4D8               	btfsc	status,2,c
  1485  000AB0  D01C               	goto	l582
  1486  000AB2  0E01               	movlw	1
  1487  000AB4  6E2A               	movwf	___lwdiv@counter,c
  1488  000AB6  D004               	goto	l1043
  1489  000AB8                     l1041:
  1490  000AB8  90D8               	bcf	status,0,c
  1491  000ABA  3626               	rlcf	___lwdiv@divisor,f,c
  1492  000ABC  3627               	rlcf	___lwdiv@divisor+1,f,c
  1493  000ABE  2A2A               	incf	___lwdiv@counter,f,c
  1494  000AC0                     l1043:
  1495  000AC0  AE27               	btfss	___lwdiv@divisor+1,7,c
  1496  000AC2  D7FA               	goto	l1041
  1497  000AC4                     l1045:
  1498  000AC4  90D8               	bcf	status,0,c
  1499  000AC6  3628               	rlcf	___lwdiv@quotient,f,c
  1500  000AC8  3629               	rlcf	___lwdiv@quotient+1,f,c
  1501  000ACA  5026               	movf	___lwdiv@divisor,w,c
  1502  000ACC  5C24               	subwf	___lwdiv@dividend,w,c
  1503  000ACE  5027               	movf	___lwdiv@divisor+1,w,c
  1504  000AD0  5825               	subwfb	___lwdiv@dividend+1,w,c
  1505  000AD2  A0D8               	btfss	status,0,c
  1506  000AD4  D005               	goto	l1053
  1507  000AD6  5026               	movf	___lwdiv@divisor,w,c
  1508  000AD8  5E24               	subwf	___lwdiv@dividend,f,c
  1509  000ADA  5027               	movf	___lwdiv@divisor+1,w,c
  1510  000ADC  5A25               	subwfb	___lwdiv@dividend+1,f,c
  1511  000ADE  8028               	bsf	___lwdiv@quotient,0,c
  1512  000AE0                     l1053:
  1513  000AE0  90D8               	bcf	status,0,c
  1514  000AE2  3227               	rrcf	___lwdiv@divisor+1,f,c
  1515  000AE4  3226               	rrcf	___lwdiv@divisor,f,c
  1516  000AE6  2E2A               	decfsz	___lwdiv@counter,f,c
  1517  000AE8  D7ED               	goto	l1045
  1518  000AEA                     l582:
  1519  000AEA  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  1520  000AEE  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1521  000AF2  0012               	return		;funcret
  1522  000AF4                     __end_of___lwdiv:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           prodh	equ	0xFF4
  1529                           prodl	equ	0xFF3
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           indf2	equ	0xFDF
  1533                           postinc2	equ	0xFDE
  1534                           postdec2	equ	0xFDD
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           prodh	equ	0xFF4
  1543                           prodl	equ	0xFF3
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           indf2	equ	0xFDF
  1547                           postinc2	equ	0xFDE
  1548                           postdec2	equ	0xFDD
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553                           	psect	rparam
  1554  0000                     tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           indf2	equ	0xFDF
  1563                           postinc2	equ	0xFDE
  1564                           postdec2	equ	0xFDD
  1565                           fsr2h	equ	0xFDA
  1566                           fsr2l	equ	0xFD9
  1567                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        2
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     24      61
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           228      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sendSerialStr@str	PTR const unsigned char  size(2) Largest target is 8
		 -> setup@readyStr(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_setup
    _setup->_sendSerialStr
    _sendSerialStr->_sendSerialByte
    _sendData->_sendSerialByte
    _delayms->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1374
                                             19 COMRAM     5     5      0
                            _delayms
                           _sendData
                              _setup
                        _takeReading
 ---------------------------------------------------------------------------------
 (1) _takeReading                                          1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                9     9      0     330
                                             10 COMRAM     9     9      0
                      _sendSerialStr
                           _setupUSB
 ---------------------------------------------------------------------------------
 (2) _setupUSB                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendSerialStr                                        7     4      3     238
                                              3 COMRAM     7     4      3
                     _sendSerialByte
 ---------------------------------------------------------------------------------
 (1) _sendData                                             2     2      0     125
                                              3 COMRAM     2     2      0
                     _sendSerialByte
 ---------------------------------------------------------------------------------
 (3) _sendSerialByte                                       3     3      0      20
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _delayms                                              9     7      2     779
                                              7 COMRAM     9     7      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delayms
     ___lwdiv
     ___lwmod
   _sendData
     _sendSerialByte
   _setup
     _sendSerialStr
       _sendSerialByte
     _setupUSB
   _takeReading

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMl            3FF      0       0      22        0.0%
BIGRAMh            3E4      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK4            E4      0       0      12        0.0%
BANK4               E4      0       0      13        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     18      3D       1       64.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      16        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec 02 15:19:11 2016

       sendData@checksum 0027                       l94 0A10                       l87 09C8  
                     l88 0A28              __CFG_BOR$ON 000000              __CFG_BORV$0 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
            __CFG_LVP$ON 000000                      l131 09B0                      l128 0988  
                    l582 0AEA                      l592 0B2C                      l797 0BD6  
                    l949 0A62                      l799 0BDA                      l975 082C  
                    l979 0834                      l989 089C             __CFG_CPB$OFF 000000  
                    u310 0916                      u407 09FA                      u417 097A  
           __CFG_CPD$OFF 000000                      u427 09A4                      u397 09DE  
                    prod 000FF3                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_WDT$OFF 000000                     l1041 0AB8                     l1033 0B56  
                   l1043 0AC0                     l1115 08E4                     l1053 0AE0  
                   l1045 0AC4                     l1061 0B02                     l1141 099E  
                   l1029 0B40                     l1125 0908                     l1063 0B0A  
                   l1135 0974                     l1119 08EC                     l1065 0B0E  
                   l1161 09F4                     l1153 09D8                     l1069 0B22  
                   l1173 0A20                     l1167 0A0C                     l1159 09F0  
           __CFG_WDTPS$1 000000                     _main 09C4                     _mode 0023  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000010            __CFG_PLLDIV$6 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0024          __end_of___lwdiv 0AF4  
        __end_of___lwmod 0B36                    _RCREG 000FAE             main@newDelay 003A  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
          __CFG_USBDIV$1 000000                    _TXREG 000FAD            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000          __end_of_delayms 09C4            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000    __end_of_sendSerialStr 0B6A  
         __CFG_EBTRB$OFF 000000                    _setup 08A4                    tablat 000FF5  
                  status 000FD8           __CFG_ICPRT$OFF 000000             ?_takeReading 0024  
        __initialization 0B6A             __end_of_main 0A42           _sendSerialByte 0BC4  
                 ??_main 0037            __activetblptr 000002       __end_ofsetup@F4336 0809  
                 _BD0CNT 000401                   _BD1CNT 000405                   _BD2CNT 000409  
                 _BD3CNT 00040D                   _ADCON1 000FC1                   ?_setup 0024  
                 _SPBRGH 000FB0            main@errorFlag 0039           __CFG_VREGEN$ON 000000  
         __CFG_XINST$OFF 000000   __end_of_sendSerialByte 0BE0           __CFG_STVREN$ON 000000  
              ??___lwdiv 0028                ??___lwmod 0028                   clear_0 0B88  
              ??_delayms 002D         __end_of_sendData 08A4             __pdataCOMRAM 003C  
       __end_of_setupUSB 0BC4             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   setup@i 0036  
    _lastSampleTimestamp 0021               __accesstop 0060  __end_of__initialization 0B8E  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0024  
     sendSerialByte@byte 0026       sendSerialByte@time 0024          ?_sendSerialByte 0024  
          __end_of_setup 0936                  ??_setup 002E         sendSerialStr@num 0029  
       sendSerialStr@str 0027     __size_of_takeReading 0060                  _BD0ADRH 000403  
                _BD0ADRL 000402                  _BD1ADRH 000407                  _BD1ADRL 000406  
                _BD2ADRH 00040B                  _BD2ADRL 00040A                  _BD3ADRH 00040F  
                _BD3ADRL 00040E                  _BD0STAT 000400                  _BD1STAT 000404  
                _BD2STAT 000408                  _BD3STAT 00040C                ?_sendData 0024  
                __Hparam 0000                  __Lparam 0000                ?_setupUSB 0024  
                ___lwdiv 0AA2                  ___lwmod 0AF4             __psmallconst 0800  
                __pcinit 0B6A                  __ramtop 0800                  _delayms 0936  
                __ptext0 09C4                  __ptext1 0A42                  __ptext2 08A4  
                __ptext3 0B98                  __ptext4 0B36                  __ptext5 080A  
                __ptext6 0BC4                  __ptext7 0936                  __ptext8 0AF4  
                __ptext9 0AA2                _T0CONbits 000FD5     end_of_initialization 0B8E  
          __Lmediumconst 0000               ??_sendData 0027                _RCSTAbits 000FAB  
             ??_setupUSB 0024                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE   __size_of_sendSerialStr 0034                _PORTCbits 000F82  
              _TRISCbits 000F94                _TXSTAbits 000FAC         ??_sendSerialByte 0024  
            _BAUDCONbits 000FB8            __pidataCOMRAM 0BE0      start_initialization 0B6A  
          _sendSerialStr 0B36             takeReading@i 0024            delayms@chunks 002F  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0001           ?_sendSerialStr 0027  
          ??_takeReading 0024         ___lwdiv@dividend 0024          main@commandByte 0038  
      __size_of_sendData 009A                 ?___lwdiv 0024                 ?___lwmod 0024  
      __size_of_setupUSB 002C                 ?_delayms 002B              __smallconst 0800  
       ___lwdiv@quotient 0028           __size_of_setup 0092         delayms@remainder 0031  
              delayms@ms 002B               setup@F4336 0801                 _PIR1bits 000F9E  
               _UCFGbits 000F6F                 _UEP0bits 000F70      __end_of_takeReading 0AA2  
             _ADCON0bits 000FC2          ??_sendSerialStr 002A             _sampleBuffer 0001  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lwdiv 0052  
       __size_of___lwmod 0042         __size_of_delayms 008E                sendData@i 0028  
         sendSerialStr@i 002C          ___lwdiv@divisor 0026          ___lwdiv@counter 002A  
          __size_of_main 007E                 _sendData 080A              _takeReading 0A42  
               delayms@i 0032                 _setupUSB 0B98    __CFG_CPUDIV$OSC1_PLL2 000000  
            _sampleDelay 003C         ___lwmod@dividend 0024  __size_of_sendSerialByte 001C  
        ___lwmod@divisor 0026          ___lwmod@counter 0028            setup@readyStr 002E  
